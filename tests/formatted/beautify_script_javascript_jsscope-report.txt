<p>Scope analysis does not provide support for undeclared variables.</p><p><em>0</em> instances of <strong>missing semicolons</strong> counted.</p><p><em>0</em> unnecessary instances of the keyword <strong>new</strong> counted.</p><div class="beautify" data-prettydiff-ignore="true"><ol class="count"><li>1</li><li class="fold" title="folds from line 2 to line xxx">-2</li><li>3</li><li class="fold" title="folds from line 4 to line xxx">-4</li><li class="fold" title="folds from line 5 to line 128">-5</li><li class="fold" title="folds from line 6 to line 93">-6</li><li class="fold" title="folds from line 7 to line 17">-7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li class="fold" title="folds from line 18 to line 30">-18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li class="fold" title="folds from line 31 to line 39">-31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li class="fold" title="folds from line 40 to line 48">-40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li class="fold" title="folds from line 49 to line 61">-49</li><li>50</li><li>51</li><li>52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li>59</li><li>60</li><li>61</li><li class="fold" title="folds from line 62 to line 69">-62</li><li>63</li><li>64</li><li>65</li><li>66</li><li>67</li><li>68</li><li>69</li><li class="fold" title="folds from line 70 to line 79">-70</li><li>71</li><li>72</li><li>73</li><li>74</li><li>75</li><li>76</li><li>77</li><li>78</li><li>79</li><li class="fold" title="folds from line 80 to line 85">-80</li><li>81</li><li>82</li><li>83</li><li>84</li><li>85</li><li class="fold" title="folds from line 86 to line 92">-86</li><li>87</li><li>88</li><li>89</li><li>90</li><li>91</li><li>92</li><li>93</li><li class="fold" title="folds from line 94 to line 116">-94</li><li class="fold" title="folds from line 95 to line 101">-95</li><li>96</li><li>97</li><li>98</li><li>99</li><li>100</li><li>101</li><li class="fold" title="folds from line 102 to line 108">-102</li><li>103</li><li>104</li><li>105</li><li>106</li><li>107</li><li>108</li><li class="fold" title="folds from line 109 to line 115">-109</li><li>110</li><li>111</li><li>112</li><li>113</li><li>114</li><li>115</li><li>116</li><li class="fold" title="folds from line 117 to line 119">-117</li><li>118</li><li>119</li><li class="fold" title="folds from line 120 to line 122">-120</li><li>121</li><li>122</li><li class="fold" title="folds from line 123 to line 125">-123</li><li>124</li><li class="fold" title="folds from line 125 to line 127">-125</li><li>126</li><li>127</li><li>128</li><li>129</li><li>130</li><li>131</li><li>132</li><li>133</li><li class="fold" title="folds from line 134 to line xxx">-134</li><li class="fold" title="folds from line 135 to line xxx">-135</li><li class="fold" title="folds from line 136 to line 137">-136</li><li>137</li><li class="fold" title="folds from line 138 to line 2230">-138</li><li>139</li><li>140</li><li>141</li><li>142</li><li>143</li><li>144</li><li>145</li><li>146</li><li>147</li><li>148</li><li>149</li><li>150</li><li>151</li><li>152</li><li>153</li><li>154</li><li>155</li><li>156</li><li>157</li><li>158</li><li>159</li><li>160</li><li>161</li><li>162</li><li>163</li><li>164</li><li>165</li><li class="fold" title="folds from line 166 to line 168">-166</li><li>167</li><li>168</li><li>169</li><li>170</li><li>171</li><li>172</li><li>173</li><li class="fold" title="folds from line 174 to line 231">-174</li><li>175</li><li>176</li><li>177</li><li>178</li><li>179</li><li>180</li><li>181</li><li>182</li><li>183</li><li class="fold" title="folds from line 184 to line 186">-184</li><li>185</li><li>186</li><li>187</li><li class="fold" title="folds from line 188 to line 230">-188</li><li class="fold" title="folds from line 189 to line 191">-189</li><li>190</li><li class="fold" title="folds from line 191 to line 193">-191</li><li>192</li><li>193</li><li class="fold" title="folds from line 194 to line 196">-194</li><li>195</li><li>196</li><li class="fold" title="folds from line 197 to line 214">-197</li><li class="fold" title="folds from line 198 to line 210">-198</li><li class="fold" title="folds from line 199 to line 205">-199</li><li class="fold" title="folds from line 200 to line 202">-200</li><li>201</li><li class="fold" title="folds from line 202 to line 204">-202</li><li>203</li><li>204</li><li class="fold" title="folds from line 205 to line 207">-205</li><li>206</li><li class="fold" title="folds from line 207 to line 209">-207</li><li>208</li><li>209</li><li>210</li><li class="fold" title="folds from line 211 to line 213">-211</li><li>212</li><li>213</li><li>214</li><li class="fold" title="folds from line 215 to line 228">-215</li><li class="fold" title="folds from line 216 to line 222">-216</li><li class="fold" title="folds from line 217 to line 219">-217</li><li>218</li><li class="fold" title="folds from line 219 to line 221">-219</li><li>220</li><li>221</li><li class="fold" title="folds from line 222 to line 224">-222</li><li>223</li><li class="fold" title="folds from line 224 to line 226">-224</li><li>225</li><li>226</li><li>227</li><li>228</li><li>229</li><li>230</li><li>231</li><li class="fold" title="folds from line 232 to line 450">-232</li><li>233</li><li>234</li><li>235</li><li>236</li><li>237</li><li>238</li><li>239</li><li>240</li><li>241</li><li>242</li><li>243</li><li>244</li><li>245</li><li>246</li><li>247</li><li>248</li><li>249</li><li>250</li><li>251</li><li>252</li><li>253</li><li>254</li><li class="fold" title="folds from line 255 to line 271">-255</li><li>256</li><li class="fold" title="folds from line 257 to line 259">-257</li><li>258</li><li>259</li><li class="fold" title="folds from line 260 to line 262">-260</li><li>261</li><li>262</li><li class="fold" title="folds from line 263 to line 266">-263</li><li>264</li><li>265</li><li class="fold" title="folds from line 266 to line 268">-266</li><li>267</li><li class="fold" title="folds from line 268 to line 270">-268</li><li>269</li><li>270</li><li>271</li><li class="fold" title="folds from line 272 to line 284">-272</li><li>273</li><li>274</li><li>275</li><li>276</li><li>277</li><li>278</li><li>279</li><li>280</li><li>281</li><li>282</li><li>283</li><li>284</li><li class="fold" title="folds from line 285 to line 302">-285</li><li>286</li><li>287</li><li>288</li><li>289</li><li>290</li><li class="fold" title="folds from line 291 to line 293">-291</li><li>292</li><li class="fold" title="folds from line 293 to line 296">-293</li><li>294</li><li>295</li><li class="fold" title="folds from line 296 to line 298">-296</li><li>297</li><li>298</li><li>299</li><li>300</li><li>301</li><li>302</li><li>303</li><li>304</li><li>305</li><li>306</li><li class="fold" title="folds from line 307 to line 312">-307</li><li>308</li><li class="fold" title="folds from line 309 to line 311">-309</li><li>310</li><li>311</li><li>312</li><li class="fold" title="folds from line 313 to line 315">-313</li><li>314</li><li>315</li><li class="fold" title="folds from line 316 to line 318">-316</li><li>317</li><li>318</li><li>319</li><li>320</li><li>321</li><li class="fold" title="folds from line 322 to line 324">-322</li><li>323</li><li>324</li><li class="fold" title="folds from line 325 to line 327">-325</li><li>326</li><li>327</li><li class="fold" title="folds from line 328 to line 354">-328</li><li>329</li><li class="fold" title="folds from line 330 to line 333">-330</li><li>331</li><li>332</li><li class="fold" title="folds from line 333 to line 336">-333</li><li>334</li><li>335</li><li class="fold" title="folds from line 336 to line 339">-336</li><li>337</li><li>338</li><li class="fold" title="folds from line 339 to line 342">-339</li><li>340</li><li>341</li><li class="fold" title="folds from line 342 to line 345">-342</li><li>343</li><li>344</li><li class="fold" title="folds from line 345 to line 348">-345</li><li>346</li><li>347</li><li>348</li><li class="fold" title="folds from line 349 to line 351">-349</li><li>350</li><li>351</li><li>352</li><li>353</li><li>354</li><li class="fold" title="folds from line 355 to line 433">-355</li><li class="fold" title="folds from line 356 to line 358">-356</li><li>357</li><li>358</li><li class="fold" title="folds from line 359 to line 361">-359</li><li>360</li><li>361</li><li>362</li><li>363</li><li>364</li><li>365</li><li>366</li><li>367</li><li>368</li><li>369</li><li>370</li><li>371</li><li>372</li><li class="fold" title="folds from line 373 to line 411">-373</li><li>374</li><li class="fold" title="folds from line 375 to line 377">-375</li><li>376</li><li class="fold" title="folds from line 377 to line 379">-377</li><li>378</li><li class="fold" title="folds from line 379 to line 381">-379</li><li>380</li><li class="fold" title="folds from line 381 to line 383">-381</li><li>382</li><li class="fold" title="folds from line 383 to line 385">-383</li><li>384</li><li class="fold" title="folds from line 385 to line 387">-385</li><li>386</li><li>387</li><li class="fold" title="folds from line 388 to line 390">-388</li><li>389</li><li>390</li><li class="fold" title="folds from line 391 to line 394">-391</li><li>392</li><li>393</li><li>394</li><li class="fold" title="folds from line 395 to line 399">-395</li><li>396</li><li>397</li><li>398</li><li class="fold" title="folds from line 399 to line 402">-399</li><li>400</li><li>401</li><li>402</li><li class="fold" title="folds from line 403 to line 405">-403</li><li>404</li><li>405</li><li>406</li><li class="fold" title="folds from line 407 to line 409">-407</li><li>408</li><li>409</li><li>410</li><li>411</li><li class="fold" title="folds from line 412 to line 414">-412</li><li>413</li><li>414</li><li class="fold" title="folds from line 415 to line 417">-415</li><li>416</li><li>417</li><li>418</li><li>419</li><li>420</li><li class="fold" title="folds from line 421 to line 428">-421</li><li>422</li><li class="fold" title="folds from line 423 to line 425">-423</li><li>424</li><li class="fold" title="folds from line 425 to line 427">-425</li><li>426</li><li>427</li><li>428</li><li>429</li><li>430</li><li>431</li><li>432</li><li class="fold" title="folds from line 433 to line 447">-433</li><li class="fold" title="folds from line 434 to line 444">-434</li><li>435</li><li class="fold" title="folds from line 436 to line 443">-436</li><li>437</li><li class="fold" title="folds from line 438 to line 440">-438</li><li>439</li><li class="fold" title="folds from line 440 to line 442">-440</li><li>441</li><li>442</li><li>443</li><li>444</li><li>445</li><li>446</li><li>447</li><li>448</li><li>449</li><li>450</li><li class="fold" title="folds from line 451 to line 476">-451</li><li class="fold" title="folds from line 452 to line 454">-452</li><li>453</li><li class="fold" title="folds from line 454 to line 472">-454</li><li class="fold" title="folds from line 455 to line 457">-455</li><li>456</li><li>457</li><li>458</li><li>459</li><li>460</li><li class="fold" title="folds from line 461 to line 463">-461</li><li>462</li><li>463</li><li>464</li><li>465</li><li>466</li><li class="fold" title="folds from line 467 to line 469">-467</li><li>468</li><li class="fold" title="folds from line 469 to line 471">-469</li><li>470</li><li>471</li><li>472</li><li class="fold" title="folds from line 473 to line 475">-473</li><li>474</li><li>475</li><li>476</li><li class="fold" title="folds from line 477 to line 511">-477</li><li>478</li><li>479</li><li class="fold" title="folds from line 480 to line 482">-480</li><li>481</li><li>482</li><li>483</li><li class="fold" title="folds from line 484 to line 487">-484</li><li>485</li><li>486</li><li>487</li><li class="fold" title="folds from line 488 to line 490">-488</li><li>489</li><li>490</li><li class="fold" title="folds from line 491 to line 501">-491</li><li class="fold" title="folds from line 492 to line 498">-492</li><li class="fold" title="folds from line 493 to line 497">-493</li><li>494</li><li>495</li><li>496</li><li>497</li><li>498</li><li>499</li><li>500</li><li class="fold" title="folds from line 501 to line 507">-501</li><li class="fold" title="folds from line 502 to line 506">-502</li><li>503</li><li>504</li><li>505</li><li>506</li><li>507</li><li class="fold" title="folds from line 508 to line 510">-508</li><li>509</li><li>510</li><li>511</li><li class="fold" title="folds from line 512 to line 609">-512</li><li>513</li><li>514</li><li>515</li><li>516</li><li class="fold" title="folds from line 517 to line 531">-517</li><li>518</li><li>519</li><li>520</li><li>521</li><li>522</li><li>523</li><li class="fold" title="folds from line 524 to line 530">-524</li><li>525</li><li>526</li><li class="fold" title="folds from line 527 to line 529">-527</li><li>528</li><li>529</li><li>530</li><li>531</li><li class="fold" title="folds from line 532 to line 534">-532</li><li>533</li><li class="fold" title="folds from line 534 to line 596">-534</li><li>535</li><li class="fold" title="folds from line 536 to line 540">-536</li><li class="fold" title="folds from line 537 to line 539">-537</li><li>538</li><li>539</li><li>540</li><li class="fold" title="folds from line 541 to line 584">-541</li><li>542</li><li>543</li><li>544</li><li>545</li><li>546</li><li>547</li><li>548</li><li>549</li><li class="fold" title="folds from line 550 to line 557">-550</li><li>551</li><li class="fold" title="folds from line 552 to line 554">-552</li><li>553</li><li class="fold" title="folds from line 554 to line 556">-554</li><li>555</li><li>556</li><li>557</li><li>558</li><li>559</li><li>560</li><li>561</li><li>562</li><li>563</li><li>564</li><li>565</li><li>566</li><li class="fold" title="folds from line 567 to line 571">-567</li><li>568</li><li>569</li><li>570</li><li>571</li><li>572</li><li class="fold" title="folds from line 573 to line 581">-573</li><li class="fold" title="folds from line 574 to line 579">-574</li><li>575</li><li class="fold" title="folds from line 576 to line 578">-576</li><li>577</li><li>578</li><li>579</li><li>580</li><li>581</li><li>582</li><li>583</li><li class="fold" title="folds from line 584 to line 591">-584</li><li>585</li><li class="fold" title="folds from line 586 to line 588">-586</li><li>587</li><li class="fold" title="folds from line 588 to line 590">-588</li><li>589</li><li>590</li><li>591</li><li class="fold" title="folds from line 592 to line 594">-592</li><li>593</li><li>594</li><li>595</li><li class="fold" title="folds from line 596 to line 598">-596</li><li>597</li><li class="fold" title="folds from line 598 to line 600">-598</li><li>599</li><li class="fold" title="folds from line 600 to line 602">-600</li><li>601</li><li class="fold" title="folds from line 602 to line 604">-602</li><li>603</li><li>604</li><li class="fold" title="folds from line 605 to line 607">-605</li><li>606</li><li>607</li><li>608</li><li>609</li><li class="fold" title="folds from line 610 to line 643">-610</li><li class="fold" title="folds from line 611 to line 614">-611</li><li>612</li><li>613</li><li class="fold" title="folds from line 614 to line 624">-614</li><li>615</li><li class="fold" title="folds from line 616 to line 618">-616</li><li>617</li><li>618</li><li class="fold" title="folds from line 619 to line 621">-619</li><li>620</li><li class="fold" title="folds from line 621 to line 623">-621</li><li>622</li><li>623</li><li class="fold" title="folds from line 624 to line 636">-624</li><li>625</li><li class="fold" title="folds from line 626 to line 628">-626</li><li>627</li><li class="fold" title="folds from line 628 to line 630">-628</li><li>629</li><li>630</li><li class="fold" title="folds from line 631 to line 633">-631</li><li>632</li><li class="fold" title="folds from line 633 to line 635">-633</li><li>634</li><li>635</li><li class="fold" title="folds from line 636 to line 642">-636</li><li class="fold" title="folds from line 637 to line 639">-637</li><li>638</li><li class="fold" title="folds from line 639 to line 641">-639</li><li>640</li><li>641</li><li>642</li><li>643</li><li class="fold" title="folds from line 644 to line 659">-644</li><li>645</li><li>646</li><li>647</li><li class="fold" title="folds from line 648 to line 650">-648</li><li>649</li><li>650</li><li class="fold" title="folds from line 651 to line 654">-651</li><li>652</li><li>653</li><li class="fold" title="folds from line 654 to line 656">-654</li><li>655</li><li class="fold" title="folds from line 656 to line 658">-656</li><li>657</li><li>658</li><li>659</li><li class="fold" title="folds from line 660 to line 924">-660</li><li>661</li><li>662</li><li>663</li><li>664</li><li class="fold" title="folds from line 665 to line 695">-665</li><li class="fold" title="folds from line 666 to line 693">-666</li><li>667</li><li>668</li><li>669</li><li class="fold" title="folds from line 670 to line 682">-670</li><li class="fold" title="folds from line 671 to line 673">-671</li><li>672</li><li>673</li><li class="fold" title="folds from line 674 to line 680">-674</li><li class="fold" title="folds from line 675 to line 677">-675</li><li>676</li><li class="fold" title="folds from line 677 to line 679">-677</li><li>678</li><li>679</li><li>680</li><li>681</li><li>682</li><li class="fold" title="folds from line 683 to line 686">-683</li><li>684</li><li>685</li><li>686</li><li>687</li><li>688</li><li class="fold" title="folds from line 689 to line 692">-689</li><li>690</li><li>691</li><li>692</li><li>693</li><li>694</li><li>695</li><li class="fold" title="folds from line 696 to line 700">-696</li><li>697</li><li>698</li><li>699</li><li>700</li><li class="fold" title="folds from line 701 to line 725">-701</li><li>702</li><li>703</li><li>704</li><li class="fold" title="folds from line 705 to line 711">-705</li><li class="fold" title="folds from line 706 to line 708">-706</li><li>707</li><li class="fold" title="folds from line 708 to line 710">-708</li><li>709</li><li>710</li><li>711</li><li class="fold" title="folds from line 712 to line 714">-712</li><li>713</li><li class="fold" title="folds from line 714 to line 720">-714</li><li class="fold" title="folds from line 715 to line 717">-715</li><li>716</li><li class="fold" title="folds from line 717 to line 719">-717</li><li>718</li><li>719</li><li class="fold" title="folds from line 720 to line 722">-720</li><li>721</li><li>722</li><li>723</li><li>724</li><li>725</li><li class="fold" title="folds from line 726 to line 885">-726</li><li>727</li><li>728</li><li>729</li><li>730</li><li>731</li><li class="fold" title="folds from line 732 to line 746">-732</li><li>733</li><li class="fold" title="folds from line 734 to line 745">-734</li><li>735</li><li class="fold" title="folds from line 736 to line 744">-736</li><li>737</li><li>738</li><li>739</li><li>740</li><li class="fold" title="folds from line 741 to line 743">-741</li><li>742</li><li>743</li><li>744</li><li>745</li><li>746</li><li class="fold" title="folds from line 747 to line 754">-747</li><li class="fold" title="folds from line 748 to line 750">-748</li><li>749</li><li>750</li><li>751</li><li>752</li><li>753</li><li>754</li><li class="fold" title="folds from line 755 to line 759">-755</li><li>756</li><li>757</li><li>758</li><li>759</li><li>760</li><li>761</li><li>762</li><li>763</li><li>764</li><li class="fold" title="folds from line 765 to line 768">-765</li><li>766</li><li>767</li><li>768</li><li class="fold" title="folds from line 769 to line 773">-769</li><li>770</li><li>771</li><li>772</li><li>773</li><li class="fold" title="folds from line 774 to line 777">-774</li><li>775</li><li>776</li><li>777</li><li class="fold" title="folds from line 778 to line 780">-778</li><li>779</li><li>780</li><li class="fold" title="folds from line 781 to line 802">-781</li><li>782</li><li>783</li><li>784</li><li>785</li><li class="fold" title="folds from line 786 to line 801">-786</li><li>787</li><li>788</li><li class="fold" title="folds from line 789 to line 800">-789</li><li class="fold" title="folds from line 790 to line 798">-790</li><li class="fold" title="folds from line 791 to line 793">-791</li><li>792</li><li>793</li><li class="fold" title="folds from line 794 to line 797">-794</li><li>795</li><li>796</li><li>797</li><li>798</li><li>799</li><li>800</li><li>801</li><li>802</li><li class="fold" title="folds from line 803 to line 806">-803</li><li>804</li><li>805</li><li>806</li><li class="fold" title="folds from line 807 to line 824">-807</li><li class="fold" title="folds from line 808 to line 821">-808</li><li>809</li><li>810</li><li>811</li><li>812</li><li class="fold" title="folds from line 813 to line 816">-813</li><li>814</li><li>815</li><li>816</li><li class="fold" title="folds from line 817 to line 820">-817</li><li>818</li><li>819</li><li>820</li><li>821</li><li>822</li><li>823</li><li>824</li><li class="fold" title="folds from line 825 to line 878">-825</li><li>826</li><li>827</li><li class="fold" title="folds from line 828 to line 871">-828</li><li class="fold" title="folds from line 829 to line 831">-829</li><li>830</li><li>831</li><li class="fold" title="folds from line 832 to line 834">-832</li><li>833</li><li>834</li><li class="fold" title="folds from line 835 to line 869">-835</li><li>836</li><li>837</li><li>838</li><li class="fold" title="folds from line 839 to line 862">-839</li><li class="fold" title="folds from line 840 to line 842">-840</li><li>841</li><li class="fold" title="folds from line 842 to line 844">-842</li><li>843</li><li>844</li><li class="fold" title="folds from line 845 to line 861">-845</li><li>846</li><li class="fold" title="folds from line 847 to line 859">-847</li><li class="fold" title="folds from line 848 to line 850">-848</li><li>849</li><li>850</li><li>851</li><li>852</li><li>853</li><li>854</li><li class="fold" title="folds from line 855 to line 857">-855</li><li>856</li><li>857</li><li>858</li><li>859</li><li>860</li><li>861</li><li>862</li><li class="fold" title="folds from line 863 to line 866">-863</li><li>864</li><li>865</li><li>866</li><li>867</li><li>868</li><li>869</li><li>870</li><li>871</li><li class="fold" title="folds from line 872 to line 875">-872</li><li>873</li><li>874</li><li>875</li><li>876</li><li>877</li><li>878</li><li class="fold" title="folds from line 879 to line 882">-879</li><li>880</li><li>881</li><li>882</li><li>883</li><li>884</li><li>885</li><li class="fold" title="folds from line 886 to line 922">-886</li><li class="fold" title="folds from line 887 to line 903">-887</li><li>888</li><li class="fold" title="folds from line 889 to line 901">-889</li><li>890</li><li class="fold" title="folds from line 891 to line 893">-891</li><li>892</li><li>893</li><li class="fold" title="folds from line 894 to line 897">-894</li><li>895</li><li>896</li><li>897</li><li class="fold" title="folds from line 898 to line 900">-898</li><li>899</li><li>900</li><li>901</li><li>902</li><li>903</li><li>904</li><li class="fold" title="folds from line 905 to line 907">-905</li><li>906</li><li>907</li><li class="fold" title="folds from line 908 to line 910">-908</li><li>909</li><li>910</li><li>911</li><li>912</li><li>913</li><li>914</li><li>915</li><li class="fold" title="folds from line 916 to line 919">-916</li><li>917</li><li>918</li><li>919</li><li>920</li><li>921</li><li>922</li><li>923</li><li>924</li><li class="fold" title="folds from line 925 to line 1095">-925</li><li>926</li><li>927</li><li>928</li><li>929</li><li class="fold" title="folds from line 930 to line 938">-930</li><li class="fold" title="folds from line 931 to line 937">-931</li><li class="fold" title="folds from line 932 to line 934">-932</li><li>933</li><li class="fold" title="folds from line 934 to line 936">-934</li><li>935</li><li>936</li><li>937</li><li>938</li><li>939</li><li>940</li><li>941</li><li>942</li><li>943</li><li>944</li><li class="fold" title="folds from line 945 to line 947">-945</li><li>946</li><li class="fold" title="folds from line 947 to line 959">-947</li><li class="fold" title="folds from line 948 to line 950">-948</li><li>949</li><li class="fold" title="folds from line 950 to line 952">-950</li><li>951</li><li class="fold" title="folds from line 952 to line 954">-952</li><li>953</li><li class="fold" title="folds from line 954 to line 956">-954</li><li>955</li><li class="fold" title="folds from line 956 to line 958">-956</li><li>957</li><li>958</li><li>959</li><li class="fold" title="folds from line 960 to line 962">-960</li><li>961</li><li>962</li><li class="fold" title="folds from line 963 to line 1005">-963</li><li>964</li><li class="fold" title="folds from line 965 to line 975">-965</li><li class="fold" title="folds from line 966 to line 968">-966</li><li>967</li><li class="fold" title="folds from line 968 to line 970">-968</li><li>969</li><li class="fold" title="folds from line 970 to line 972">-970</li><li>971</li><li class="fold" title="folds from line 972 to line 974">-972</li><li>973</li><li>974</li><li>975</li><li class="fold" title="folds from line 976 to line 987">-976</li><li class="fold" title="folds from line 977 to line 981">-977</li><li>978</li><li>979</li><li>980</li><li>981</li><li class="fold" title="folds from line 982 to line 986">-982</li><li>983</li><li>984</li><li>985</li><li>986</li><li>987</li><li class="fold" title="folds from line 988 to line 996">-988</li><li class="fold" title="folds from line 989 to line 992">-989</li><li>990</li><li>991</li><li>992</li><li>993</li><li>994</li><li>995</li><li>996</li><li class="fold" title="folds from line 997 to line 1002">-997</li><li class="fold" title="folds from line 998 to line 1001">-998</li><li>999</li><li>1000</li><li>1001</li><li>1002</li><li>1003</li><li>1004</li><li>1005</li><li class="fold" title="folds from line 1006 to line 1050">-1006</li><li class="fold" title="folds from line 1007 to line 1009">-1007</li><li>1008</li><li>1009</li><li class="fold" title="folds from line 1010 to line 1016">-1010</li><li class="fold" title="folds from line 1011 to line 1013">-1011</li><li>1012</li><li class="fold" title="folds from line 1013 to line 1015">-1013</li><li>1014</li><li>1015</li><li>1016</li><li class="fold" title="folds from line 1017 to line 1019">-1017</li><li>1018</li><li class="fold" title="folds from line 1019 to line 1027">-1019</li><li class="fold" title="folds from line 1020 to line 1022">-1020</li><li>1021</li><li class="fold" title="folds from line 1022 to line 1024">-1022</li><li>1023</li><li class="fold" title="folds from line 1024 to line 1026">-1024</li><li>1025</li><li>1026</li><li>1027</li><li>1028</li><li>1029</li><li>1030</li><li>1031</li><li class="fold" title="folds from line 1032 to line 1035">-1032</li><li>1033</li><li>1034</li><li>1035</li><li class="fold" title="folds from line 1036 to line 1039">-1036</li><li>1037</li><li>1038</li><li>1039</li><li>1040</li><li>1041</li><li>1042</li><li>1043</li><li>1044</li><li class="fold" title="folds from line 1045 to line 1047">-1045</li><li>1046</li><li>1047</li><li>1048</li><li>1049</li><li>1050</li><li class="fold" title="folds from line 1051 to line 1094">-1051</li><li class="fold" title="folds from line 1052 to line 1054">-1052</li><li>1053</li><li>1054</li><li class="fold" title="folds from line 1055 to line 1057">-1055</li><li>1056</li><li class="fold" title="folds from line 1057 to line 1059">-1057</li><li>1058</li><li class="fold" title="folds from line 1059 to line 1061">-1059</li><li>1060</li><li>1061</li><li class="fold" title="folds from line 1062 to line 1065">-1062</li><li>1063</li><li>1064</li><li>1065</li><li class="fold" title="folds from line 1066 to line 1070">-1066</li><li>1067</li><li>1068</li><li>1069</li><li>1070</li><li class="fold" title="folds from line 1071 to line 1075">-1071</li><li>1072</li><li>1073</li><li>1074</li><li>1075</li><li class="fold" title="folds from line 1076 to line 1079">-1076</li><li>1077</li><li>1078</li><li>1079</li><li>1080</li><li class="fold" title="folds from line 1081 to line 1091">-1081</li><li class="fold" title="folds from line 1082 to line 1085">-1082</li><li>1083</li><li>1084</li><li>1085</li><li class="fold" title="folds from line 1086 to line 1089">-1086</li><li>1087</li><li>1088</li><li>1089</li><li>1090</li><li>1091</li><li>1092</li><li>1093</li><li>1094</li><li>1095</li><li class="fold" title="folds from line 1096 to line 1481">-1096</li><li>1097</li><li>1098</li><li>1099</li><li class="fold" title="folds from line 1100 to line 1123">-1100</li><li>1101</li><li>1102</li><li>1103</li><li class="fold" title="folds from line 1104 to line 1106">-1104</li><li>1105</li><li>1106</li><li>1107</li><li>1108</li><li class="fold" title="folds from line 1109 to line 1118">-1109</li><li>1110</li><li class="fold" title="folds from line 1111 to line 1114">-1111</li><li>1112</li><li>1113</li><li>1114</li><li class="fold" title="folds from line 1115 to line 1117">-1115</li><li>1116</li><li>1117</li><li>1118</li><li class="fold" title="folds from line 1119 to line 1122">-1119</li><li>1120</li><li>1121</li><li>1122</li><li>1123</li><li class="fold" title="folds from line 1124 to line 1126">-1124</li><li>1125</li><li>1126</li><li class="fold" title="folds from line 1127 to line 1129">-1127</li><li>1128</li><li>1129</li><li class="fold" title="folds from line 1130 to line 1137">-1130</li><li class="fold" title="folds from line 1131 to line 1133">-1131</li><li>1132</li><li>1133</li><li class="fold" title="folds from line 1134 to line 1136">-1134</li><li>1135</li><li>1136</li><li>1137</li><li class="fold" title="folds from line 1138 to line 1194">-1138</li><li class="fold" title="folds from line 1139 to line 1192">-1139</li><li>1140</li><li>1141</li><li>1142</li><li>1143</li><li class="fold" title="folds from line 1144 to line 1191">-1144</li><li class="fold" title="folds from line 1145 to line 1147">-1145</li><li>1146</li><li>1147</li><li class="fold" title="folds from line 1148 to line 1150">-1148</li><li>1149</li><li>1150</li><li class="fold" title="folds from line 1151 to line 1189">-1151</li><li>1152</li><li>1153</li><li>1154</li><li class="fold" title="folds from line 1155 to line 1157">-1155</li><li>1156</li><li>1157</li><li>1158</li><li>1159</li><li>1160</li><li>1161</li><li>1162</li><li>1163</li><li>1164</li><li>1165</li><li class="fold" title="folds from line 1166 to line 1170">-1166</li><li>1167</li><li>1168</li><li>1169</li><li>1170</li><li class="fold" title="folds from line 1171 to line 1173">-1171</li><li>1172</li><li>1173</li><li>1174</li><li>1175</li><li>1176</li><li>1177</li><li>1178</li><li>1179</li><li>1180</li><li>1181</li><li>1182</li><li class="fold" title="folds from line 1183 to line 1188">-1183</li><li class="fold" title="folds from line 1184 to line 1186">-1184</li><li>1185</li><li>1186</li><li>1187</li><li>1188</li><li>1189</li><li>1190</li><li>1191</li><li>1192</li><li>1193</li><li>1194</li><li class="fold" title="folds from line 1195 to line 1197">-1195</li><li>1196</li><li>1197</li><li class="fold" title="folds from line 1198 to line 1202">-1198</li><li>1199</li><li>1200</li><li>1201</li><li class="fold" title="folds from line 1202 to line 1209">-1202</li><li class="fold" title="folds from line 1203 to line 1205">-1203</li><li>1204</li><li class="fold" title="folds from line 1205 to line 1207">-1205</li><li>1206</li><li>1207</li><li>1208</li><li class="fold" title="folds from line 1209 to line 1212">-1209</li><li>1210</li><li>1211</li><li class="fold" title="folds from line 1212 to line 1218">-1212</li><li>1213</li><li>1214</li><li>1215</li><li>1216</li><li>1217</li><li class="fold" title="folds from line 1218 to line 1224">-1218</li><li>1219</li><li>1220</li><li>1221</li><li>1222</li><li>1223</li><li class="fold" title="folds from line 1224 to line 1393">-1224</li><li class="fold" title="folds from line 1225 to line 1389">-1225</li><li>1226</li><li>1227</li><li>1228</li><li>1229</li><li>1230</li><li>1231</li><li>1232</li><li>1233</li><li>1234</li><li>1235</li><li>1236</li><li>1237</li><li>1238</li><li>1239</li><li class="fold" title="folds from line 1240 to line 1281">-1240</li><li>1241</li><li class="fold" title="folds from line 1242 to line 1244">-1242</li><li>1243</li><li>1244</li><li>1245</li><li class="fold" title="folds from line 1246 to line 1263">-1246</li><li>1247</li><li class="fold" title="folds from line 1248 to line 1250">-1248</li><li>1249</li><li>1250</li><li class="fold" title="folds from line 1251 to line 1253">-1251</li><li>1252</li><li>1253</li><li class="fold" title="folds from line 1254 to line 1256">-1254</li><li>1255</li><li class="fold" title="folds from line 1256 to line 1258">-1256</li><li>1257</li><li>1258</li><li class="fold" title="folds from line 1259 to line 1261">-1259</li><li>1260</li><li>1261</li><li>1262</li><li>1263</li><li class="fold" title="folds from line 1264 to line 1266">-1264</li><li>1265</li><li>1266</li><li class="fold" title="folds from line 1267 to line 1280">-1267</li><li class="fold" title="folds from line 1268 to line 1279">-1268</li><li>1269</li><li class="fold" title="folds from line 1270 to line 1278">-1270</li><li>1271</li><li class="fold" title="folds from line 1272 to line 1277">-1272</li><li>1273</li><li class="fold" title="folds from line 1274 to line 1276">-1274</li><li>1275</li><li>1276</li><li>1277</li><li>1278</li><li>1279</li><li>1280</li><li>1281</li><li>1282</li><li>1283</li><li class="fold" title="folds from line 1284 to line 1286">-1284</li><li>1285</li><li>1286</li><li class="fold" title="folds from line 1287 to line 1323">-1287</li><li>1288</li><li class="fold" title="folds from line 1289 to line 1291">-1289</li><li>1290</li><li class="fold" title="folds from line 1291 to line 1313">-1291</li><li class="fold" title="folds from line 1292 to line 1294">-1292</li><li>1293</li><li class="fold" title="folds from line 1294 to line 1299">-1294</li><li>1295</li><li class="fold" title="folds from line 1296 to line 1298">-1296</li><li>1297</li><li>1298</li><li class="fold" title="folds from line 1299 to line 1301">-1299</li><li>1300</li><li>1301</li><li class="fold" title="folds from line 1302 to line 1304">-1302</li><li>1303</li><li class="fold" title="folds from line 1304 to line 1312">-1304</li><li class="fold" title="folds from line 1305 to line 1307">-1305</li><li>1306</li><li>1307</li><li>1308</li><li class="fold" title="folds from line 1309 to line 1311">-1309</li><li>1310</li><li>1311</li><li>1312</li><li class="fold" title="folds from line 1313 to line 1322">-1313</li><li class="fold" title="folds from line 1314 to line 1316">-1314</li><li>1315</li><li class="fold" title="folds from line 1316 to line 1321">-1316</li><li>1317</li><li class="fold" title="folds from line 1318 to line 1320">-1318</li><li>1319</li><li>1320</li><li>1321</li><li>1322</li><li>1323</li><li class="fold" title="folds from line 1324 to line 1383">-1324</li><li class="fold" title="folds from line 1325 to line 1343">-1325</li><li>1326</li><li class="fold" title="folds from line 1327 to line 1342">-1327</li><li>1328</li><li class="fold" title="folds from line 1329 to line 1337">-1329</li><li>1330</li><li>1331</li><li>1332</li><li>1333</li><li class="fold" title="folds from line 1334 to line 1336">-1334</li><li>1335</li><li>1336</li><li>1337</li><li class="fold" title="folds from line 1338 to line 1341">-1338</li><li>1339</li><li>1340</li><li>1341</li><li>1342</li><li class="fold" title="folds from line 1343 to line 1345">-1343</li><li>1344</li><li>1345</li><li>1346</li><li>1347</li><li class="fold" title="folds from line 1348 to line 1380">-1348</li><li>1349</li><li class="fold" title="folds from line 1350 to line 1377">-1350</li><li>1351</li><li>1352</li><li>1353</li><li>1354</li><li>1355</li><li>1356</li><li>1357</li><li>1358</li><li>1359</li><li>1360</li><li class="fold" title="folds from line 1361 to line 1369">-1361</li><li>1362</li><li class="fold" title="folds from line 1363 to line 1368">-1363</li><li>1364</li><li class="fold" title="folds from line 1365 to line 1367">-1365</li><li>1366</li><li>1367</li><li>1368</li><li class="fold" title="folds from line 1369 to line 1371">-1369</li><li>1370</li><li>1371</li><li>1372</li><li>1373</li><li class="fold" title="folds from line 1374 to line 1376">-1374</li><li>1375</li><li>1376</li><li class="fold" title="folds from line 1377 to line 1379">-1377</li><li>1378</li><li>1379</li><li>1380</li><li>1381</li><li>1382</li><li class="fold" title="folds from line 1383 to line 1385">-1383</li><li>1384</li><li>1385</li><li class="fold" title="folds from line 1386 to line 1388">-1386</li><li>1387</li><li>1388</li><li class="fold" title="folds from line 1389 to line 1391">-1389</li><li>1390</li><li>1391</li><li>1392</li><li class="fold" title="folds from line 1393 to line 1402">-1393</li><li class="fold" title="folds from line 1394 to line 1396">-1394</li><li>1395</li><li>1396</li><li class="fold" title="folds from line 1397 to line 1399">-1397</li><li>1398</li><li>1399</li><li>1400</li><li>1401</li><li>1402</li><li>1403</li><li>1404</li><li class="fold" title="folds from line 1405 to line 1411">-1405</li><li class="fold" title="folds from line 1406 to line 1408">-1406</li><li>1407</li><li>1408</li><li>1409</li><li>1410</li><li class="fold" title="folds from line 1411 to line 1418">-1411</li><li>1412</li><li class="fold" title="folds from line 1413 to line 1415">-1413</li><li>1414</li><li class="fold" title="folds from line 1415 to line 1417">-1415</li><li>1416</li><li>1417</li><li class="fold" title="folds from line 1418 to line 1461">-1418</li><li class="fold" title="folds from line 1419 to line 1422">-1419</li><li>1420</li><li>1421</li><li class="fold" title="folds from line 1422 to line 1424">-1422</li><li>1423</li><li>1424</li><li class="fold" title="folds from line 1425 to line 1427">-1425</li><li>1426</li><li class="fold" title="folds from line 1427 to line 1459">-1427</li><li class="fold" title="folds from line 1428 to line 1430">-1428</li><li>1429</li><li>1430</li><li>1431</li><li>1432</li><li class="fold" title="folds from line 1433 to line 1458">-1433</li><li class="fold" title="folds from line 1434 to line 1436">-1434</li><li>1435</li><li>1436</li><li class="fold" title="folds from line 1437 to line 1453">-1437</li><li>1438</li><li class="fold" title="folds from line 1439 to line 1452">-1439</li><li>1440</li><li>1441</li><li>1442</li><li class="fold" title="folds from line 1443 to line 1446">-1443</li><li>1444</li><li>1445</li><li>1446</li><li class="fold" title="folds from line 1447 to line 1450">-1447</li><li>1448</li><li>1449</li><li>1450</li><li>1451</li><li>1452</li><li>1453</li><li class="fold" title="folds from line 1454 to line 1456">-1454</li><li>1455</li><li>1456</li><li>1457</li><li>1458</li><li>1459</li><li>1460</li><li class="fold" title="folds from line 1461 to line 1469">-1461</li><li class="fold" title="folds from line 1462 to line 1465">-1462</li><li>1463</li><li>1464</li><li class="fold" title="folds from line 1465 to line 1467">-1465</li><li>1466</li><li>1467</li><li>1468</li><li class="fold" title="folds from line 1469 to line 1471">-1469</li><li>1470</li><li>1471</li><li>1472</li><li>1473</li><li>1474</li><li>1475</li><li>1476</li><li>1477</li><li>1478</li><li>1479</li><li>1480</li><li>1481</li><li class="fold" title="folds from line 1482 to line 1929">-1482</li><li>1483</li><li>1484</li><li>1485</li><li class="fold" title="folds from line 1486 to line 1488">-1486</li><li>1487</li><li>1488</li><li class="fold" title="folds from line 1489 to line 1530">-1489</li><li>1490</li><li>1491</li><li>1492</li><li class="fold" title="folds from line 1493 to line 1495">-1493</li><li>1494</li><li>1495</li><li class="fold" title="folds from line 1496 to line 1529">-1496</li><li>1497</li><li>1498</li><li>1499</li><li class="fold" title="folds from line 1500 to line 1528">-1500</li><li class="fold" title="folds from line 1501 to line 1526">-1501</li><li>1502</li><li>1503</li><li>1504</li><li class="fold" title="folds from line 1505 to line 1507">-1505</li><li>1506</li><li>1507</li><li>1508</li><li>1509</li><li>1510</li><li>1511</li><li class="fold" title="folds from line 1512 to line 1516">-1512</li><li>1513</li><li>1514</li><li>1515</li><li>1516</li><li class="fold" title="folds from line 1517 to line 1522">-1517</li><li class="fold" title="folds from line 1518 to line 1520">-1518</li><li>1519</li><li>1520</li><li>1521</li><li>1522</li><li class="fold" title="folds from line 1523 to line 1525">-1523</li><li>1524</li><li>1525</li><li>1526</li><li>1527</li><li>1528</li><li>1529</li><li>1530</li><li class="fold" title="folds from line 1531 to line 1537">-1531</li><li class="fold" title="folds from line 1532 to line 1534">-1532</li><li>1533</li><li>1534</li><li>1535</li><li>1536</li><li>1537</li><li class="fold" title="folds from line 1538 to line 1544">-1538</li><li class="fold" title="folds from line 1539 to line 1541">-1539</li><li>1540</li><li>1541</li><li>1542</li><li>1543</li><li>1544</li><li class="fold" title="folds from line 1545 to line 1553">-1545</li><li class="fold" title="folds from line 1546 to line 1548">-1546</li><li>1547</li><li class="fold" title="folds from line 1548 to line 1550">-1548</li><li>1549</li><li>1550</li><li>1551</li><li>1552</li><li>1553</li><li class="fold" title="folds from line 1554 to line 1611">-1554</li><li>1555</li><li>1556</li><li>1557</li><li>1558</li><li>1559</li><li>1560</li><li class="fold" title="folds from line 1561 to line 1571">-1561</li><li class="fold" title="folds from line 1562 to line 1570">-1562</li><li>1563</li><li class="fold" title="folds from line 1564 to line 1567">-1564</li><li>1565</li><li>1566</li><li>1567</li><li>1568</li><li>1569</li><li>1570</li><li>1571</li><li class="fold" title="folds from line 1572 to line 1576">-1572</li><li>1573</li><li>1574</li><li>1575</li><li>1576</li><li class="fold" title="folds from line 1577 to line 1579">-1577</li><li>1578</li><li class="fold" title="folds from line 1579 to line 1610">-1579</li><li>1580</li><li class="fold" title="folds from line 1581 to line 1583">-1581</li><li>1582</li><li>1583</li><li>1584</li><li>1585</li><li>1586</li><li class="fold" title="folds from line 1587 to line 1590">-1587</li><li>1588</li><li>1589</li><li>1590</li><li>1591</li><li class="fold" title="folds from line 1592 to line 1609">-1592</li><li>1593</li><li class="fold" title="folds from line 1594 to line 1596">-1594</li><li>1595</li><li class="fold" title="folds from line 1596 to line 1598">-1596</li><li>1597</li><li>1598</li><li>1599</li><li class="fold" title="folds from line 1600 to line 1608">-1600</li><li class="fold" title="folds from line 1601 to line 1603">-1601</li><li>1602</li><li>1603</li><li class="fold" title="folds from line 1604 to line 1606">-1604</li><li>1605</li><li>1606</li><li>1607</li><li>1608</li><li>1609</li><li>1610</li><li>1611</li><li class="fold" title="folds from line 1612 to line 1675">-1612</li><li>1613</li><li>1614</li><li>1615</li><li class="fold" title="folds from line 1616 to line 1620">-1616</li><li>1617</li><li>1618</li><li>1619</li><li>1620</li><li class="fold" title="folds from line 1621 to line 1625">-1621</li><li>1622</li><li>1623</li><li>1624</li><li>1625</li><li class="fold" title="folds from line 1626 to line 1630">-1626</li><li>1627</li><li>1628</li><li>1629</li><li>1630</li><li class="fold" title="folds from line 1631 to line 1635">-1631</li><li>1632</li><li>1633</li><li>1634</li><li>1635</li><li>1636</li><li>1637</li><li>1638</li><li class="fold" title="folds from line 1639 to line 1643">-1639</li><li>1640</li><li>1641</li><li>1642</li><li>1643</li><li class="fold" title="folds from line 1644 to line 1648">-1644</li><li>1645</li><li>1646</li><li>1647</li><li>1648</li><li class="fold" title="folds from line 1649 to line 1666">-1649</li><li>1650</li><li>1651</li><li class="fold" title="folds from line 1652 to line 1665">-1652</li><li>1653</li><li class="fold" title="folds from line 1654 to line 1664">-1654</li><li class="fold" title="folds from line 1655 to line 1658">-1655</li><li>1656</li><li>1657</li><li>1658</li><li class="fold" title="folds from line 1659 to line 1663">-1659</li><li>1660</li><li>1661</li><li>1662</li><li>1663</li><li>1664</li><li>1665</li><li class="fold" title="folds from line 1666 to line 1668">-1666</li><li>1667</li><li class="fold" title="folds from line 1668 to line 1670">-1668</li><li>1669</li><li class="fold" title="folds from line 1670 to line 1672">-1670</li><li>1671</li><li>1672</li><li>1673</li><li>1674</li><li>1675</li><li class="fold" title="folds from line 1676 to line 1686">-1676</li><li class="fold" title="folds from line 1677 to line 1680">-1677</li><li>1678</li><li>1679</li><li class="fold" title="folds from line 1680 to line 1682">-1680</li><li>1681</li><li class="fold" title="folds from line 1682 to line 1684">-1682</li><li>1683</li><li>1684</li><li>1685</li><li>1686</li><li class="fold" title="folds from line 1687 to line 1848">-1687</li><li class="fold" title="folds from line 1688 to line 1690">-1688</li><li>1689</li><li class="fold" title="folds from line 1690 to line 1692">-1690</li><li>1691</li><li>1692</li><li class="fold" title="folds from line 1693 to line 1696">-1693</li><li>1694</li><li>1695</li><li>1696</li><li>1697</li><li>1698</li><li>1699</li><li>1700</li><li>1701</li><li>1702</li><li class="fold" title="folds from line 1703 to line 1706">-1703</li><li>1704</li><li>1705</li><li>1706</li><li class="fold" title="folds from line 1707 to line 1720">-1707</li><li class="fold" title="folds from line 1708 to line 1711">-1708</li><li>1709</li><li>1710</li><li>1711</li><li>1712</li><li>1713</li><li>1714</li><li>1715</li><li class="fold" title="folds from line 1716 to line 1719">-1716</li><li>1717</li><li>1718</li><li>1719</li><li>1720</li><li class="fold" title="folds from line 1721 to line 1761">-1721</li><li>1722</li><li class="fold" title="folds from line 1723 to line 1733">-1723</li><li class="fold" title="folds from line 1724 to line 1726">-1724</li><li>1725</li><li>1726</li><li>1727</li><li>1728</li><li>1729</li><li class="fold" title="folds from line 1730 to line 1732">-1730</li><li>1731</li><li>1732</li><li>1733</li><li class="fold" title="folds from line 1734 to line 1736">-1734</li><li>1735</li><li>1736</li><li class="fold" title="folds from line 1737 to line 1739">-1737</li><li>1738</li><li>1739</li><li>1740</li><li>1741</li><li>1742</li><li>1743</li><li>1744</li><li class="fold" title="folds from line 1745 to line 1747">-1745</li><li>1746</li><li>1747</li><li>1748</li><li>1749</li><li>1750</li><li>1751</li><li class="fold" title="folds from line 1752 to line 1754">-1752</li><li>1753</li><li>1754</li><li class="fold" title="folds from line 1755 to line 1757">-1755</li><li>1756</li><li>1757</li><li class="fold" title="folds from line 1758 to line 1760">-1758</li><li>1759</li><li>1760</li><li>1761</li><li class="fold" title="folds from line 1762 to line 1764">-1762</li><li>1763</li><li>1764</li><li>1765</li><li>1766</li><li class="fold" title="folds from line 1767 to line 1771">-1767</li><li class="fold" title="folds from line 1768 to line 1770">-1768</li><li>1769</li><li>1770</li><li>1771</li><li>1772</li><li>1773</li><li>1774</li><li class="fold" title="folds from line 1775 to line 1777">-1775</li><li>1776</li><li class="fold" title="folds from line 1777 to line 1779">-1777</li><li>1778</li><li>1779</li><li>1780</li><li class="fold" title="folds from line 1781 to line 1784">-1781</li><li>1782</li><li>1783</li><li>1784</li><li class="fold" title="folds from line 1785 to line 1787">-1785</li><li>1786</li><li class="fold" title="folds from line 1787 to line 1794">-1787</li><li>1788</li><li class="fold" title="folds from line 1789 to line 1791">-1789</li><li>1790</li><li class="fold" title="folds from line 1791 to line 1793">-1791</li><li>1792</li><li>1793</li><li class="fold" title="folds from line 1794 to line 1796">-1794</li><li>1795</li><li>1796</li><li>1797</li><li>1798</li><li>1799</li><li class="fold" title="folds from line 1800 to line 1805">-1800</li><li>1801</li><li>1802</li><li>1803</li><li>1804</li><li>1805</li><li class="fold" title="folds from line 1806 to line 1808">-1806</li><li>1807</li><li class="fold" title="folds from line 1808 to line 1810">-1808</li><li>1809</li><li>1810</li><li class="fold" title="folds from line 1811 to line 1829">-1811</li><li>1812</li><li>1813</li><li>1814</li><li>1815</li><li>1816</li><li class="fold" title="folds from line 1817 to line 1828">-1817</li><li>1818</li><li>1819</li><li>1820</li><li>1821</li><li class="fold" title="folds from line 1822 to line 1825">-1822</li><li>1823</li><li>1824</li><li>1825</li><li>1826</li><li>1827</li><li>1828</li><li class="fold" title="folds from line 1829 to line 1845">-1829</li><li class="fold" title="folds from line 1830 to line 1832">-1830</li><li>1831</li><li>1832</li><li class="fold" title="folds from line 1833 to line 1842">-1833</li><li>1834</li><li>1835</li><li class="fold" title="folds from line 1836 to line 1839">-1836</li><li>1837</li><li>1838</li><li>1839</li><li>1840</li><li>1841</li><li>1842</li><li>1843</li><li>1844</li><li>1845</li><li>1846</li><li>1847</li><li>1848</li><li class="fold" title="folds from line 1849 to line 1857">-1849</li><li class="fold" title="folds from line 1850 to line 1852">-1850</li><li>1851</li><li class="fold" title="folds from line 1852 to line 1854">-1852</li><li>1853</li><li class="fold" title="folds from line 1854 to line 1856">-1854</li><li>1855</li><li>1856</li><li>1857</li><li>1858</li><li>1859</li><li>1860</li><li class="fold" title="folds from line 1861 to line 1919">-1861</li><li>1862</li><li>1863</li><li>1864</li><li>1865</li><li class="fold" title="folds from line 1866 to line 1868">-1866</li><li>1867</li><li>1868</li><li class="fold" title="folds from line 1869 to line 1918">-1869</li><li class="fold" title="folds from line 1870 to line 1878">-1870</li><li class="fold" title="folds from line 1871 to line 1876">-1871</li><li class="fold" title="folds from line 1872 to line 1874">-1872</li><li>1873</li><li>1874</li><li>1875</li><li>1876</li><li>1877</li><li>1878</li><li class="fold" title="folds from line 1879 to line 1881">-1879</li><li>1880</li><li>1881</li><li class="fold" title="folds from line 1882 to line 1887">-1882</li><li class="fold" title="folds from line 1883 to line 1885">-1883</li><li>1884</li><li>1885</li><li>1886</li><li>1887</li><li class="fold" title="folds from line 1888 to line 1916">-1888</li><li>1889</li><li class="fold" title="folds from line 1890 to line 1912">-1890</li><li>1891</li><li>1892</li><li>1893</li><li>1894</li><li>1895</li><li>1896</li><li>1897</li><li class="fold" title="folds from line 1898 to line 1908">-1898</li><li class="fold" title="folds from line 1899 to line 1903">-1899</li><li class="fold" title="folds from line 1900 to line 1902">-1900</li><li>1901</li><li>1902</li><li>1903</li><li class="fold" title="folds from line 1904 to line 1906">-1904</li><li>1905</li><li>1906</li><li>1907</li><li>1908</li><li class="fold" title="folds from line 1909 to line 1911">-1909</li><li>1910</li><li>1911</li><li>1912</li><li class="fold" title="folds from line 1913 to line 1915">-1913</li><li>1914</li><li>1915</li><li>1916</li><li>1917</li><li>1918</li><li>1919</li><li class="fold" title="folds from line 1920 to line 1923">-1920</li><li>1921</li><li>1922</li><li>1923</li><li class="fold" title="folds from line 1924 to line 1927">-1924</li><li>1925</li><li>1926</li><li>1927</li><li>1928</li><li>1929</li><li class="fold" title="folds from line 1930 to line 1975">-1930</li><li class="fold" title="folds from line 1931 to line 1943">-1931</li><li>1932</li><li class="fold" title="folds from line 1933 to line 1935">-1933</li><li>1934</li><li class="fold" title="folds from line 1935 to line 1942">-1935</li><li class="fold" title="folds from line 1936 to line 1940">-1936</li><li class="fold" title="folds from line 1937 to line 1939">-1937</li><li>1938</li><li>1939</li><li>1940</li><li>1941</li><li>1942</li><li>1943</li><li class="fold" title="folds from line 1944 to line 1950">-1944</li><li class="fold" title="folds from line 1945 to line 1947">-1945</li><li>1946</li><li class="fold" title="folds from line 1947 to line 1949">-1947</li><li>1948</li><li>1949</li><li>1950</li><li class="fold" title="folds from line 1951 to line 1953">-1951</li><li>1952</li><li class="fold" title="folds from line 1953 to line 1955">-1953</li><li>1954</li><li class="fold" title="folds from line 1955 to line 1957">-1955</li><li>1956</li><li class="fold" title="folds from line 1957 to line 1959">-1957</li><li>1958</li><li class="fold" title="folds from line 1959 to line 1973">-1959</li><li>1960</li><li class="fold" title="folds from line 1961 to line 1963">-1961</li><li>1962</li><li>1963</li><li>1964</li><li>1965</li><li>1966</li><li>1967</li><li class="fold" title="folds from line 1968 to line 1970">-1968</li><li>1969</li><li class="fold" title="folds from line 1970 to line 1972">-1970</li><li>1971</li><li>1972</li><li>1973</li><li>1974</li><li>1975</li><li class="fold" title="folds from line 1976 to line 2167">-1976</li><li>1977</li><li>1978</li><li>1979</li><li class="fold" title="folds from line 1980 to line 1983">-1980</li><li>1981</li><li>1982</li><li>1983</li><li class="fold" title="folds from line 1984 to line 1986">-1984</li><li>1985</li><li>1986</li><li class="fold" title="folds from line 1987 to line 1989">-1987</li><li>1988</li><li>1989</li><li class="fold" title="folds from line 1990 to line 1992">-1990</li><li>1991</li><li>1992</li><li class="fold" title="folds from line 1993 to line 2067">-1993</li><li class="fold" title="folds from line 1994 to line 2060">-1994</li><li>1995</li><li>1996</li><li>1997</li><li>1998</li><li>1999</li><li>2000</li><li>2001</li><li>2002</li><li>2003</li><li>2004</li><li>2005</li><li>2006</li><li>2007</li><li>2008</li><li>2009</li><li>2010</li><li>2011</li><li>2012</li><li>2013</li><li>2014</li><li>2015</li><li>2016</li><li>2017</li><li>2018</li><li>2019</li><li>2020</li><li>2021</li><li>2022</li><li>2023</li><li>2024</li><li>2025</li><li>2026</li><li>2027</li><li>2028</li><li>2029</li><li>2030</li><li>2031</li><li>2032</li><li>2033</li><li>2034</li><li>2035</li><li>2036</li><li>2037</li><li>2038</li><li>2039</li><li>2040</li><li>2041</li><li>2042</li><li>2043</li><li>2044</li><li>2045</li><li>2046</li><li>2047</li><li>2048</li><li>2049</li><li>2050</li><li>2051</li><li>2052</li><li>2053</li><li>2054</li><li>2055</li><li>2056</li><li>2057</li><li>2058</li><li>2059</li><li>2060</li><li class="fold" title="folds from line 2061 to line 2063">-2061</li><li>2062</li><li>2063</li><li class="fold" title="folds from line 2064 to line 2066">-2064</li><li>2065</li><li>2066</li><li>2067</li><li class="fold" title="folds from line 2068 to line 2070">-2068</li><li>2069</li><li>2070</li><li class="fold" title="folds from line 2071 to line 2073">-2071</li><li>2072</li><li>2073</li><li class="fold" title="folds from line 2074 to line 2081">-2074</li><li class="fold" title="folds from line 2075 to line 2078">-2075</li><li>2076</li><li>2077</li><li>2078</li><li>2079</li><li>2080</li><li>2081</li><li class="fold" title="folds from line 2082 to line 2084">-2082</li><li>2083</li><li class="fold" title="folds from line 2084 to line 2091">-2084</li><li class="fold" title="folds from line 2085 to line 2087">-2085</li><li>2086</li><li class="fold" title="folds from line 2087 to line 2090">-2087</li><li>2088</li><li>2089</li><li>2090</li><li class="fold" title="folds from line 2091 to line 2111">-2091</li><li>2092</li><li>2093</li><li class="fold" title="folds from line 2094 to line 2110">-2094</li><li class="fold" title="folds from line 2095 to line 2097">-2095</li><li>2096</li><li>2097</li><li class="fold" title="folds from line 2098 to line 2100">-2098</li><li>2099</li><li>2100</li><li class="fold" title="folds from line 2101 to line 2108">-2101</li><li class="fold" title="folds from line 2102 to line 2105">-2102</li><li>2103</li><li>2104</li><li>2105</li><li>2106</li><li>2107</li><li>2108</li><li>2109</li><li>2110</li><li class="fold" title="folds from line 2111 to line 2113">-2111</li><li>2112</li><li class="fold" title="folds from line 2113 to line 2139">-2113</li><li>2114</li><li class="fold" title="folds from line 2115 to line 2117">-2115</li><li>2116</li><li>2117</li><li class="fold" title="folds from line 2118 to line 2136">-2118</li><li>2119</li><li>2120</li><li class="fold" title="folds from line 2121 to line 2132">-2121</li><li class="fold" title="folds from line 2122 to line 2124">-2122</li><li>2123</li><li>2124</li><li class="fold" title="folds from line 2125 to line 2127">-2125</li><li>2126</li><li>2127</li><li class="fold" title="folds from line 2128 to line 2130">-2128</li><li>2129</li><li>2130</li><li>2131</li><li>2132</li><li class="fold" title="folds from line 2133 to line 2135">-2133</li><li>2134</li><li>2135</li><li>2136</li><li>2137</li><li>2138</li><li>2139</li><li class="fold" title="folds from line 2140 to line 2144">-2140</li><li>2141</li><li>2142</li><li>2143</li><li>2144</li><li class="fold" title="folds from line 2145 to line 2149">-2145</li><li>2146</li><li>2147</li><li>2148</li><li>2149</li><li class="fold" title="folds from line 2150 to line 2154">-2150</li><li>2151</li><li>2152</li><li>2153</li><li>2154</li><li>2155</li><li>2156</li><li>2157</li><li class="fold" title="folds from line 2158 to line 2161">-2158</li><li>2159</li><li>2160</li><li>2161</li><li class="fold" title="folds from line 2162 to line 2165">-2162</li><li>2163</li><li>2164</li><li>2165</li><li>2166</li><li>2167</li><li class="fold" title="folds from line 2168 to line 2170">-2168</li><li>2169</li><li>2170</li><li class="fold" title="folds from line 2171 to line 2228">-2171</li><li class="fold" title="folds from line 2172 to line 2213">-2172</li><li>2173</li><li>2174</li><li class="fold" title="folds from line 2175 to line 2177">-2175</li><li>2176</li><li class="fold" title="folds from line 2177 to line 2179">-2177</li><li>2178</li><li class="fold" title="folds from line 2179 to line 2181">-2179</li><li>2180</li><li class="fold" title="folds from line 2181 to line 2183">-2181</li><li>2182</li><li class="fold" title="folds from line 2183 to line 2185">-2183</li><li>2184</li><li class="fold" title="folds from line 2185 to line 2187">-2185</li><li>2186</li><li class="fold" title="folds from line 2187 to line 2189">-2187</li><li>2188</li><li class="fold" title="folds from line 2189 to line 2191">-2189</li><li>2190</li><li class="fold" title="folds from line 2191 to line 2193">-2191</li><li>2192</li><li class="fold" title="folds from line 2193 to line 2195">-2193</li><li>2194</li><li class="fold" title="folds from line 2195 to line 2197">-2195</li><li>2196</li><li class="fold" title="folds from line 2197 to line 2206">-2197</li><li class="fold" title="folds from line 2198 to line 2200">-2198</li><li>2199</li><li>2200</li><li class="fold" title="folds from line 2201 to line 2203">-2201</li><li>2202</li><li class="fold" title="folds from line 2203 to line 2205">-2203</li><li>2204</li><li>2205</li><li class="fold" title="folds from line 2206 to line 2208">-2206</li><li>2207</li><li>2208</li><li class="fold" title="folds from line 2209 to line 2212">-2209</li><li>2210</li><li>2211</li><li>2212</li><li class="fold" title="folds from line 2213 to line 2226">-2213</li><li class="fold" title="folds from line 2214 to line 2223">-2214</li><li>2215</li><li class="fold" title="folds from line 2216 to line 2221">-2216</li><li class="fold" title="folds from line 2217 to line 2219">-2217</li><li>2218</li><li>2219</li><li>2220</li><li>2221</li><li>2222</li><li class="fold" title="folds from line 2223 to line 2225">-2223</li><li>2224</li><li>2225</li><li>2226</li><li>2227</li><li>2228</li><li>2229</li><li>2230</li><li class="fold" title="folds from line 2231 to line 2665">-2231</li><li>2232</li><li>2233</li><li class="fold" title="folds from line 2234 to line 2243">-2234</li><li>2235</li><li>2236</li><li>2237</li><li class="fold" title="folds from line 2238 to line 2241">-2238</li><li>2239</li><li>2240</li><li>2241</li><li>2242</li><li>2243</li><li>2244</li><li>2245</li><li>2246</li><li>2247</li><li class="fold" title="folds from line 2248 to line 2267">-2248</li><li>2249</li><li>2250</li><li>2251</li><li class="fold" title="folds from line 2252 to line 2254">-2252</li><li>2253</li><li>2254</li><li class="fold" title="folds from line 2255 to line 2258">-2255</li><li>2256</li><li>2257</li><li>2258</li><li class="fold" title="folds from line 2259 to line 2265">-2259</li><li>2260</li><li class="fold" title="folds from line 2261 to line 2264">-2261</li><li>2262</li><li>2263</li><li>2264</li><li>2265</li><li>2266</li><li>2267</li><li>2268</li><li>2269</li><li>2270</li><li>2271</li><li class="fold" title="folds from line 2272 to line 2635">-2272</li><li>2273</li><li>2274</li><li>2275</li><li>2276</li><li>2277</li><li>2278</li><li>2279</li><li class="fold" title="folds from line 2280 to line 2290">-2280</li><li>2281</li><li class="fold" title="folds from line 2282 to line 2284">-2282</li><li>2283</li><li>2284</li><li class="fold" title="folds from line 2285 to line 2289">-2285</li><li>2286</li><li>2287</li><li>2288</li><li>2289</li><li>2290</li><li class="fold" title="folds from line 2291 to line 2303">-2291</li><li class="fold" title="folds from line 2292 to line 2294">-2292</li><li>2293</li><li>2294</li><li>2295</li><li class="fold" title="folds from line 2296 to line 2299">-2296</li><li>2297</li><li>2298</li><li class="fold" title="folds from line 2299 to line 2302">-2299</li><li>2300</li><li>2301</li><li>2302</li><li>2303</li><li class="fold" title="folds from line 2304 to line 2375">-2304</li><li>2305</li><li>2306</li><li class="fold" title="folds from line 2307 to line 2322">-2307</li><li class="fold" title="folds from line 2308 to line 2312">-2308</li><li class="fold" title="folds from line 2309 to line 2311">-2309</li><li>2310</li><li>2311</li><li>2312</li><li class="fold" title="folds from line 2313 to line 2319">-2313</li><li class="fold" title="folds from line 2314 to line 2317">-2314</li><li>2315</li><li>2316</li><li>2317</li><li>2318</li><li>2319</li><li>2320</li><li>2321</li><li>2322</li><li>2323</li><li>2324</li><li>2325</li><li>2326</li><li class="fold" title="folds from line 2327 to line 2342">-2327</li><li class="fold" title="folds from line 2328 to line 2332">-2328</li><li class="fold" title="folds from line 2329 to line 2331">-2329</li><li>2330</li><li>2331</li><li>2332</li><li class="fold" title="folds from line 2333 to line 2339">-2333</li><li class="fold" title="folds from line 2334 to line 2337">-2334</li><li>2335</li><li>2336</li><li>2337</li><li>2338</li><li>2339</li><li>2340</li><li>2341</li><li>2342</li><li class="fold" title="folds from line 2343 to line 2347">-2343</li><li class="fold" title="folds from line 2344 to line 2346">-2344</li><li>2345</li><li>2346</li><li>2347</li><li class="fold" title="folds from line 2348 to line 2356">-2348</li><li class="fold" title="folds from line 2349 to line 2352">-2349</li><li>2350</li><li>2351</li><li class="fold" title="folds from line 2352 to line 2354">-2352</li><li>2353</li><li>2354</li><li>2355</li><li>2356</li><li class="fold" title="folds from line 2357 to line 2373">-2357</li><li>2358</li><li class="fold" title="folds from line 2359 to line 2372">-2359</li><li>2360</li><li class="fold" title="folds from line 2361 to line 2363">-2361</li><li>2362</li><li class="fold" title="folds from line 2363 to line 2365">-2363</li><li>2364</li><li class="fold" title="folds from line 2365 to line 2368">-2365</li><li>2366</li><li>2367</li><li class="fold" title="folds from line 2368 to line 2370">-2368</li><li>2369</li><li>2370</li><li>2371</li><li>2372</li><li>2373</li><li>2374</li><li>2375</li><li>2376</li><li class="fold" title="folds from line 2377 to line 2398">-2377</li><li>2378</li><li>2379</li><li>2380</li><li class="fold" title="folds from line 2381 to line 2386">-2381</li><li>2382</li><li>2383</li><li>2384</li><li>2385</li><li>2386</li><li class="fold" title="folds from line 2387 to line 2396">-2387</li><li class="fold" title="folds from line 2388 to line 2395">-2388</li><li>2389</li><li>2390</li><li>2391</li><li>2392</li><li>2393</li><li>2394</li><li>2395</li><li>2396</li><li>2397</li><li>2398</li><li>2399</li><li class="fold" title="folds from line 2400 to line 2440">-2400</li><li>2401</li><li class="fold" title="folds from line 2402 to line 2414">-2402</li><li>2403</li><li>2404</li><li class="fold" title="folds from line 2405 to line 2413">-2405</li><li class="fold" title="folds from line 2406 to line 2412">-2406</li><li>2407</li><li class="fold" title="folds from line 2408 to line 2410">-2408</li><li>2409</li><li>2410</li><li>2411</li><li>2412</li><li>2413</li><li>2414</li><li class="fold" title="folds from line 2415 to line 2437">-2415</li><li>2416</li><li>2417</li><li>2418</li><li>2419</li><li class="fold" title="folds from line 2420 to line 2426">-2420</li><li>2421</li><li class="fold" title="folds from line 2422 to line 2425">-2422</li><li>2423</li><li>2424</li><li>2425</li><li class="fold" title="folds from line 2426 to line 2436">-2426</li><li>2427</li><li>2428</li><li>2429</li><li class="fold" title="folds from line 2430 to line 2432">-2430</li><li>2431</li><li class="fold" title="folds from line 2432 to line 2434">-2432</li><li>2433</li><li>2434</li><li>2435</li><li>2436</li><li class="fold" title="folds from line 2437 to line 2439">-2437</li><li>2438</li><li>2439</li><li>2440</li><li class="fold" title="folds from line 2441 to line 2451">-2441</li><li>2442</li><li>2443</li><li>2444</li><li>2445</li><li class="fold" title="folds from line 2446 to line 2450">-2446</li><li>2447</li><li>2448</li><li>2449</li><li>2450</li><li>2451</li><li>2452</li><li>2453</li><li>2454</li><li>2455</li><li class="fold" title="folds from line 2456 to line 2588">-2456</li><li class="fold" title="folds from line 2457 to line 2458">-2457</li><li>2458</li><li>2459</li><li>2460</li><li>2461</li><li class="fold" title="folds from line 2462 to line 2464">-2462</li><li>2463</li><li class="fold" title="folds from line 2464 to line 2466">-2464</li><li>2465</li><li>2466</li><li class="fold" title="folds from line 2467 to line 2472">-2467</li><li class="fold" title="folds from line 2468 to line 2471">-2468</li><li>2469</li><li>2470</li><li>2471</li><li>2472</li><li>2473</li><li class="fold" title="folds from line 2474 to line 2475">-2474</li><li>2475</li><li>2476</li><li class="fold" title="folds from line 2477 to line 2578">-2477</li><li class="fold" title="folds from line 2478 to line 2484">-2478</li><li class="fold" title="folds from line 2479 to line 2483">-2479</li><li class="fold" title="folds from line 2480 to line 2482">-2480</li><li>2481</li><li>2482</li><li>2483</li><li>2484</li><li>2485</li><li>2486</li><li>2487</li><li class="fold" title="folds from line 2488 to line 2490">-2488</li><li>2489</li><li class="fold" title="folds from line 2490 to line 2566">-2490</li><li class="fold" title="folds from line 2491 to line 2493">-2491</li><li>2492</li><li>2493</li><li>2494</li><li>2495</li><li>2496</li><li class="fold" title="folds from line 2497 to line 2499">-2497</li><li>2498</li><li class="fold" title="folds from line 2499 to line 2501">-2499</li><li>2500</li><li>2501</li><li>2502</li><li>2503</li><li>2504</li><li>2505</li><li class="fold" title="folds from line 2506 to line 2508">-2506</li><li>2507</li><li>2508</li><li class="fold" title="folds from line 2509 to line 2511">-2509</li><li>2510</li><li class="fold" title="folds from line 2511 to line 2532">-2511</li><li class="fold" title="folds from line 2512 to line 2515">-2512</li><li>2513</li><li>2514</li><li class="fold" title="folds from line 2515 to line 2526">-2515</li><li class="fold" title="folds from line 2516 to line 2521">-2516</li><li class="fold" title="folds from line 2517 to line 2520">-2517</li><li>2518</li><li>2519</li><li>2520</li><li class="fold" title="folds from line 2521 to line 2524">-2521</li><li>2522</li><li>2523</li><li>2524</li><li>2525</li><li>2526</li><li class="fold" title="folds from line 2527 to line 2531">-2527</li><li class="fold" title="folds from line 2528 to line 2530">-2528</li><li>2529</li><li>2530</li><li>2531</li><li class="fold" title="folds from line 2532 to line 2539">-2532</li><li class="fold" title="folds from line 2533 to line 2535">-2533</li><li>2534</li><li class="fold" title="folds from line 2535 to line 2538">-2535</li><li>2536</li><li>2537</li><li>2538</li><li class="fold" title="folds from line 2539 to line 2565">-2539</li><li>2540</li><li>2541</li><li>2542</li><li class="fold" title="folds from line 2543 to line 2549">-2543</li><li>2544</li><li>2545</li><li>2546</li><li>2547</li><li>2548</li><li>2549</li><li>2550</li><li>2551</li><li>2552</li><li class="fold" title="folds from line 2553 to line 2559">-2553</li><li>2554</li><li>2555</li><li>2556</li><li>2557</li><li>2558</li><li class="fold" title="folds from line 2559 to line 2564">-2559</li><li class="fold" title="folds from line 2560 to line 2562">-2560</li><li>2561</li><li>2562</li><li>2563</li><li>2564</li><li>2565</li><li>2566</li><li class="fold" title="folds from line 2567 to line 2569">-2567</li><li>2568</li><li class="fold" title="folds from line 2569 to line 2576">-2569</li><li class="fold" title="folds from line 2570 to line 2574">-2570</li><li class="fold" title="folds from line 2571 to line 2573">-2571</li><li>2572</li><li>2573</li><li>2574</li><li>2575</li><li>2576</li><li>2577</li><li>2578</li><li>2579</li><li class="fold" title="folds from line 2580 to line 2587">-2580</li><li class="fold" title="folds from line 2581 to line 2583">-2581</li><li>2582</li><li class="fold" title="folds from line 2583 to line 2585">-2583</li><li>2584</li><li>2585</li><li>2586</li><li>2587</li><li>2588</li><li>2589</li><li class="fold" title="folds from line 2590 to line 2592">-2590</li><li>2591</li><li class="fold" title="folds from line 2592 to line 2594">-2592</li><li>2593</li><li>2594</li><li>2595</li><li>2596</li><li class="fold" title="folds from line 2597 to line 2608">-2597</li><li>2598</li><li class="fold" title="folds from line 2599 to line 2607">-2599</li><li>2600</li><li class="fold" title="folds from line 2601 to line 2606">-2601</li><li>2602</li><li>2603</li><li>2604</li><li>2605</li><li>2606</li><li>2607</li><li>2608</li><li>2609</li><li class="fold" title="folds from line 2610 to line 2620">-2610</li><li>2611</li><li class="fold" title="folds from line 2612 to line 2618">-2612</li><li class="fold" title="folds from line 2613 to line 2615">-2613</li><li>2614</li><li class="fold" title="folds from line 2615 to line 2617">-2615</li><li>2616</li><li>2617</li><li>2618</li><li>2619</li><li>2620</li><li class="fold" title="folds from line 2621 to line 2631">-2621</li><li>2622</li><li>2623</li><li>2624</li><li>2625</li><li>2626</li><li>2627</li><li>2628</li><li>2629</li><li>2630</li><li>2631</li><li>2632</li><li>2633</li><li>2634</li><li>2635</li><li class="fold" title="folds from line 2636 to line 2656">-2636</li><li class="fold" title="folds from line 2637 to line 2647">-2637</li><li class="fold" title="folds from line 2638 to line 2640">-2638</li><li>2639</li><li>2640</li><li class="fold" title="folds from line 2641 to line 2644">-2641</li><li>2642</li><li>2643</li><li class="fold" title="folds from line 2644 to line 2646">-2644</li><li>2645</li><li>2646</li><li class="fold" title="folds from line 2647 to line 2654">-2647</li><li>2648</li><li>2649</li><li>2650</li><li>2651</li><li>2652</li><li>2653</li><li>2654</li><li>2655</li><li>2656</li><li>2657</li><li>2658</li><li>2659</li><li>2660</li><li class="fold" title="folds from line 2661 to line 2663">-2661</li><li>2662</li><li>2663</li><li>2664</li><li>2665</li><li>2666</li><li>2667</li><li>2668</li><li>2669</li><li>2670</li><li>2671</li><li>2672</li></ol><ol class="data"><li class="c0">/*global global, prettydiff*/<em class="line">&#xA;</em></li><li class="l0">(function beautify_script_init () <em class="s1">{</em><em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span>"use strict";<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span>const script = function beautify_script (options) <em class="s2">{</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span>(function beautify_script_options () <em class="s3">{</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>let styleguide = {<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>airbnb: function beautify_script_options_styleairbnb () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.endcomma = "always";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = " ";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 2;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.preserve = 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.quoteConvert = "single";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.varword = "each";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.wrap = 80;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>crockford: function beautify_script_options_stylecrockford () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.elseline = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.endcomma = "never";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = " ";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 4;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.nocaseindent = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.nochainindent = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.space = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.varword = "each";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.vertical = false;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>google: function beautify_script_options_stylegoogle () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = " ";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 4;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.preserve = 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.quoteConvert = "single";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.vertical = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.wrap = -1;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>jquery: function beautify_script_options_stylejquery () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = "\u0009";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.quoteConvert = "double";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.varword = "each";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.wrap = 80;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>jslint: function beautify_script_options_stylejslint () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.elseline = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.endcomma = "never";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = " ";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 4;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.nocaseindent = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.nochainindent = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.space = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.varword = "each";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.vertical = false;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>mrdoobs: function beautify_script_options_stylemrdoobs () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braceline = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = "\u0009";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.vertical = false;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>mediawiki: function beautify_script_options_stylemediawiki () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = "\u0009";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.preserve = 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.quoteConvert = "single";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.space = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.wrap = 80;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>meteor: function beautify_script_options_stylemeteor () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.inchar = " ";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.insize = 2;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.wrap = 80;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>yandex: function beautify_script_options_styleyandex () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.correct = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.quoteConvert = "single";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.varword = "each";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.vertical = false;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>},<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>brace_style = {<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>collapse: function beautify_brace_options_collapse () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braceline = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braces = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.formatObject = "indent";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.neverflatten = true;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>"collapse-preserve-inline": function beautify_brace_options_collapseInline () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braceline = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braces = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.formatObject = "inline";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.neverflatten = false;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>expand: function beautify_brace_options_expand () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braceline = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.bracepadding = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.braces = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.formatObject = "indent";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>options.neverflatten = true;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>};<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>if (styleguide[options.styleguide] !== undefined) <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>styleguide[options.styleguide]();<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>if (brace_style[options.brace_style] !== undefined) <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>brace_style[options.brace_style]();<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>if (options.lang === "json") <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>options.wrap = 0;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><em class="s4">}</em> else if (options.lang === "titanium") <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l3">    </span>options.correct = false;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><em class="s3">}</em>());<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span>let scolon = 0,<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>news = 0;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span>const data = options.parsed,<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>lexer = "script",<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>scopes = [],<em class="line">&#xA;</em></li><li class="c0">            // levels sets the white space value between the current token and the next token<em class="line">&#xA;</em></li><li class="c0">            // * -20 value means no white space<em class="line">&#xA;</em></li><li class="c0">            // * -10 means to separate with a space<em class="line">&#xA;</em></li><li class="c0">            // * 0 and above is the number of indentation to insert<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>levels = (function beautify_script_level () <em class="s3">{</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>let a = options.start, //will store the current level of indentation<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>b = (options<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>.end &lt; 1 || options<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>.end &gt; data<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>.token<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>.length)<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>? data<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>.token<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>.length<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>: options<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span><span class="l3">    </span>.end,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>indent = (isNaN(options.inlevel) === true)<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>? 0<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>: Number(options.inlevel),<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>skip = 0,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>notcomment = false, // if in comments before any code<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>lastlist = false, //remembers the list status of the most recently closed block<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>ctype = "", //ctype stands for "current type"<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>ctoke = "", //ctoke standa for "current token"<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>ltype = data.types[0], //ltype stands for "last type"<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>ltoke = data.token[0]; //ltype stands for "last token"<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>const varindex = [-1], //index in current scope of last var, let, or const keyword<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>list = [], //stores comma status of current block<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>level = (options.start &gt; 0)<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>? Array(options.start).fill(0, 0, options.start)<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>: [],<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>ternary = [], //used to identify ternary statments<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>extraindent = [<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>[]<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>], //stores token indexes where extra indentation occurs from ternaries and broken method chains<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>arrbreak = [], //array where a method break has occurred<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>destruct = [], //attempt to identify object destructuring<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>itemcount = [], //counts items in destructured lists<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>assignlist = [false], //are you in a list right now?<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>wordlist = [],<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>destructfix = function beautify_script_destructFix (listFix, override) <em class="s4">{</em> // listfix  - at the end of a list correct the containing list override - to<em class="line">&#xA;</em></li><li class="c0">                        // break arrays with more than 4 items into a vertical list<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let c = a - 1,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>d = (listFix === true)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>? 0<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>: 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ei = (extraindent[extraindent.length - 1] === undefined)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>? []<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>: extraindent[extraindent.length - 1],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>arrayCheck = (override === false &amp;&amp; data.stack[a] === "array" &amp;&amp; listFix === true &amp;&amp; ctoke !== "[");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (destruct[destruct.length - 1] === false || (data.stack[a] === "array" &amp;&amp; options.formatArray === "inline") || (data.stack[a] === "object" &amp;&amp; options.formatObject === "inline")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>do <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[c] === "end") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.types[c] === "start") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.stack[c] === "global") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>break;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (d === 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.stack[a] === "class" || data.stack[a] === "map" || (arrayCheck === false &amp;&amp; ((listFix === false &amp;&amp; data.token[c] !== "(" &amp;&amp; data.token[c] !== "x(") || (listFix === true &amp;&amp; data.token[c] === ",")))) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c + 1] === "template_start") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.lines[c] &lt; 1) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[c] = -20;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[c] = indent - 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (ei.length &gt; 0 &amp;&amp; ei[ei.length - 1] &gt; -1) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[c] = indent - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[c] = indent;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (listFix === false) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (d &lt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[c + 1] === "template_start") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.lines[c] &lt; 1) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[c] = -20;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[c] = indent - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (ei.length &gt; 0 &amp;&amp; ei[ei.length - 1] &gt; -1) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[c] = indent - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[c] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>break;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> while (c &gt; -1);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>strwrap = function beautify_script_strwrap (offset) <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let aa = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>bb = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>cc = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>dd = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ee = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ff = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>x = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>str = "",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>bgn = data.begin[a],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>dep = data.stack[a],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>item = data.token[a],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ind = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>off = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ei = (extraindent[extraindent.length - 1] === undefined)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>? []<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>: extraindent[extraindent.length - 1],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>lin = data.lines[a],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>wrap = options.wrap - 2,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>paren = data.token[a + 1] === ".",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>uchar = (/u[0-9a-fA-F]{4}/),<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>xchar = (/x[0-9a-fA-F]{2}/),<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>qchar = item.charAt(0),<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>slash = function beautify_script_strwrap_slash (trim, entity) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>let dist = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (entity === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>ff = trim;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>dist = dist + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> while (item.charAt(cc -(trim + dist)) === "\\" &amp;&amp; dist &lt; cc);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (entity === false) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>cc = cc - dist;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>ff = ff + dist;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> else if (dist % 2 === 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>cc = cc - ff;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>ff = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>parenpush = function beautify_script_strwrap_parenpush () <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.token.splice(a, 0, "(");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.types.splice(a, 0, "start");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.lines.splice(a, 0, lin);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.stack.splice(a, 0, "paren");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.begin.splice(a, 0, a);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>level.push(indent + 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>bgn = a;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>dep = "paren";<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>b = b + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>x = x + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>tokenpush = function beautify_script_strwrap_tokenpush (toke, type) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.token.splice(a, 0, toke);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.types.splice(a, 0, type);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.lines.splice(a, 0, lin);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.stack.splice(a, 0, dep);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>data.begin.splice(a, 0, bgn);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (toke === "+") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>level.push(ind);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> else if (toke === ")") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>b = b + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>x = x + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>ind = (data.token[data.begin[a]] === "(" &amp;&amp; (list[list.length - 1] === true || ei.length &gt; 0))<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>? indent + 3<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>: indent + 2;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>aa = a;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>do <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (aa === data.begin[a] &amp;&amp; data.token[aa] === "(") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>break;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> while (aa &gt; 0 &amp;&amp; level[aa - 1] &lt; -9);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === "(") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.token[aa] === "." &amp;&amp; data.token[data.begin[a]] !== "(") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ind = ind + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[data.begin[a]] === "(" &amp;&amp; list[list.length - 1] === false &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[aa] !== "?" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[aa] !== ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ind = indent + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (paren === true &amp;&amp; data.token[aa] !== "?" &amp;&amp; data.token[aa] !== ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ind = indent + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (offset &gt; 1 &amp;&amp; item.length &gt; offset) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>off = true;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (item.charAt(offset - 5) === "\\" &amp;&amp; uchar.test(item.slice(offset - 4, offset + 1)) === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = item.slice(0, offset - 5) + item.charAt(0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>item = item.charAt(0) + item.slice(offset - 5);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (item.charAt(offset - 4) === "\\" &amp;&amp; uchar.test(item.slice(offset - 3, offset + 2)) === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = item.slice(0, offset - 4) + item.charAt(0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>item = item.charAt(0) + item.slice(offset - 4);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (item.charAt(offset - 3) === "\\" &amp;&amp; (uchar.test(item.slice(offset - 2, offset + 3)) === true || xchar.test(item.slice(offset - 2, offset + 1)) === true)) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = item.slice(0, offset - 3) + item.charAt(0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>item = item.charAt(0) + item.slice(offset - 3);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (item.charAt(offset - 2) === "\\" &amp;&amp; (uchar.test(item.slice(offset - 1, offset + 4)) === true || xchar.test(item.slice(offset - 1, offset + 2)) === true)) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = item.slice(0, offset - 2) + item.charAt(0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>item = item.charAt(0) + item.slice(offset - 2);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (item.charAt(offset - 1) === "\\") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = item.slice(0, offset - 1) + item.charAt(0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>item = item.charAt(0) + item.slice(offset - 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = item.slice(0, offset) + item.charAt(0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>item = item.charAt(0) + item.slice(offset);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (str.charAt(str.length - 2) === "\\") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>str = str + str.charAt(0);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>tokenpush(str, "literal");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>tokenpush("+", "operator");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (item.length &gt; wrap) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.stack[a] === "object" || data.stack[a] === "array") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (off === false &amp;&amp; paren === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>parenpush();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.begin.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.lexer.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.lines.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.presv.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.stack.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.token.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.types.splice(a, 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>b = b - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>item = item.slice(1, item.length - 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>bb = Math.floor(item.length / wrap) * wrap;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>aa = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>cc = aa + wrap + dd;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (item.charAt(cc - 5) === "\\" &amp;&amp; uchar.test(item.slice(cc - 4, cc + 1)) === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>slash(5, true);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (item.charAt(cc - 4) === "\\" &amp;&amp; uchar.test(item.slice(cc - 3, cc + 2)) === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>slash(4, true);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (item.charAt(cc - 3) === "\\" &amp;&amp; (uchar.test(item.slice(cc - 2, cc + 3)) === true || xchar.test(item.slice(cc - 2, cc + 1)) === true)) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>slash(3, true);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (item.charAt(cc - 2) === "\\" &amp;&amp; (uchar.test(item.slice(cc - 1, cc + 4)) === true || xchar.test(item.slice(cc - 1, cc + 2)) === true)) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>slash(2, true);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (item.charAt(cc - 1) === "\\") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>slash(1, true);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ff = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (item.charAt(cc - 1) === "\\") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>slash(1, false);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (aa &gt; 0 &amp;&amp; dd &lt; 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>dd = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (item.charAt(cc - 1) === "\\") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>str = qchar + item.slice(ee, cc - 1) + qchar;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ee = cc - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>str = qchar + item.slice(ee, cc) + qchar;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ee = cc;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (item.charAt(cc) === "\\") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa - ff;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>tokenpush(str, "literal");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (aa &lt; item.length - wrap) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>tokenpush("+", "operator");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = aa + wrap;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (aa &lt; bb);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (aa &lt; item.length) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>tokenpush(qchar + item.slice(aa, aa + wrap) + qchar, "literal");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (paren === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>tokenpush(")", "end");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>a = a - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>x = x - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>aa = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[aa - 1] === "start") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>data.begin[aa - 1] = (aa - 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (data.begin[aa - 1] &gt; bgn) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>data.begin[aa - 1] = data.begin[aa - 1] + x;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (aa &lt; b);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ctoke = data.token[a];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ctype = data.types[a];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ltoke = data.token[a - 1];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ltype = data.types[a - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (off === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = a;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[aa - 1] === "start") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>data.begin[aa - 1] = (aa - 1);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (data.begin[aa - 1] &gt; bgn) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>data.begin[aa - 1] = data.begin[aa - 1] + x;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (aa &lt; b);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.token[a] = item;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>ctoke = data.token[a];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>ctype = "string";<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>literal = function beautify_script_literal () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke.indexOf("#!/") === 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke.charAt(0) === "}") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.bracepadding === true &amp;&amp; ctoke<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.charAt(0) === "}" &amp;&amp; ctoke<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.charAt(ctoke.length - 1) === "`") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.wrap &gt; 0 &amp;&amp; ctoke<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.length &gt; options<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.wrap &amp;&amp; (ctoke.charAt(0) === "\"" || ctoke.charAt(0) === "'")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>strwrap(0);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((ltoke === "," || ltype === "start") &amp;&amp; (data.stack[a] === "object" || data.stack[a] === "array") &amp;&amp; destruct[destruct.length - 1] === false &amp;&amp; a &gt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>endExtraInd = function beautify_script_endExtraInd () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ei = extraindent[extraindent.length - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let c = 0;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ei === undefined) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>c = ei.length - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (c &lt; 1 &amp;&amp; ei[c] &lt; 0 &amp;&amp; (ctoke === ";" || ctoke === "x;" || ctoke === ")" || ctoke === "x)" || ctoke === "}" || ctoke === "x}")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ei.pop();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (c &lt; 0 || ei[c] &lt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[ei[c]] !== "?") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ei.pop();<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &gt; -1 &amp;&amp; ei[c] &gt; -1 &amp;&amp; data.token[ei[c]] !== "?");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ei[c] = a;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ei.pop();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &gt; -1 &amp;&amp; ei[c] &gt; -1);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((data.stack[a] === "array" || ctoke === ",") &amp;&amp; ei.length &lt; 1) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>ei.push(-1);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>comment = function beautify_script_comment () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>destructfix(false, false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let ind = (options.comments === true)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>? 0<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>: indent;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (notcomment === false &amp;&amp; (/\/\u002a\s*global\s/).test(data.token[a]) === true) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let globallist = data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l5">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l5">    </span>.replace(/\/\u002a\s*global\s+/, "")<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l5">    </span>.replace(/\s*\u002a\/$/, "")<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l5">    </span>.split(","),<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = globallist.length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>globallist[aa] = globallist[aa].replace(/\s+/g, "");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (globallist[aa] !== "") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>scopes.push([globallist[aa], -1]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (aa &gt; 0);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.types[a - 1] === "comment") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = ind;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data.lines[a] &lt; 2) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let aa = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[aa] === "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (aa &lt; b &amp;&amp; data.types[aa] === "comment");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (a &lt; b - 1 &amp;&amp; data.stack[aa] !== "block" &amp;&amp; (data.token[aa] === "{" || data.token[aa] === "x{")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let bb = scopes.length;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.begin.splice(a, 0, data.begin[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.lexer.splice(a, 0, data.lexer[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.lines.splice(a, 0, data.lines[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.presv.splice(a, 0, data.presv[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.stack.splice(a, 0, data.stack[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.token.splice(a, 0, data.token[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.types.splice(a, 0, data.types[aa]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>bb = bb - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (scopes[bb][1] === aa) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scopes[bb][1] = a;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (scopes[bb][1] &lt; a) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (bb &gt; 0);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.begin.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.lexer.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.lines.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.presv.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.stack.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.token.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.types.splice(aa, 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>bb = a + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>data.begin[bb] = a;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>data.stack[bb] = data.stack[aa];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>bb = bb + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (bb &lt; aa);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>bb = bb + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.begin[bb] === data.begin[aa]) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>data.begin[bb] = a;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.types[bb] === "end") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>bb = bb + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (bb &lt; b - 1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.begin[aa] = a;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>a = a - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.stack[a] === "paren" || data.stack[a] === "method") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(indent + 2);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[a + 1] !== "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>notcomment = true;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data.token[a - 1] === ",") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = ind;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltoke === "=" &amp;&amp; data.types[a - 1] !== "comment" &amp;&amp; (/^(\/\*\*\s*@[a-z_]+\s)/).test(ctoke) === true) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltoke === "{" &amp;&amp; data.types[a - 1] !== "comment" &amp;&amp; data.lines[0] &lt; 2) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = ind;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.types[a + 1] !== "comment") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>notcomment = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>template = function beautify_script_template () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctype === "template_else") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctype === "template_start") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.lines[a - 1] &lt; 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.lines[a] &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctype === "template_end") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "template_start" || data.lines[a - 1] &lt; 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.lines[a] &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctype === "template") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.lines[a] &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>markup = function beautify_script_markup () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[a + 1] !== "," &amp;&amp; ctoke<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.indexOf("/&gt;") !== ctoke<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.length - 2) || (data.token[a + 1] === "," &amp;&amp; data.token[data.begin[a] - 3] !== "React")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>destructfix(false, false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === "return" || ltoke === "?" || ltoke === ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltype === "start" || (data.token[a - 2] === "return" &amp;&amp; data.stack[a - 1] === "method")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>separator = function beautify_script_separator () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let methtest = false;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ei = (extraindent[extraindent.length - 1] === undefined)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>? []<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>: extraindent[extraindent.length - 1],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>propertybreak = function beautify_script_separator_propertybreak () <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (options.methodchain &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>let x = a,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>y = data.begin[a],<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>z = [];<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[x] === "end") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>x = data.begin[x];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.begin[x] === y) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[x] === ".") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>z.push(x);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else if (data.token[x] === ";" || data.token[x] === "," || ((data.types[x] === "word" || data.types[x] === "reference") &amp;&amp; (data.types[x - 1] === "word" || data.types[x - 1] === "reference"))) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>x = x - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (x &gt; y);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (z.length &lt; options.methodchain) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>x = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>y = z.length;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[z[x] - 1] = indent + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>x = x + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (x &lt; y);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>level[a - 1] = indent + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "::") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === ".") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[data.begin[a]] !== "(" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[data.begin[a]] !== "x(" &amp;&amp; ei<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.length &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.stack[a] === "object" || data.stack[a] === "array") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destructfix(false, false);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.methodchain === 0) <em class="s6">{</em> // methodchain is 0 so methods and properties should be chained together<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (options.methodchain &lt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.lines[a] &gt; 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>propertybreak();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em> // methodchain is greater than 0 and should break methods if the chain reaches this value<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>propertybreak();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === ",") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (list[list.length - 1] === false &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "object" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "array" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "paren" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "expression" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "method")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>list[list.length - 1] = true;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[data.begin[a]] === "(") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>let aa = a;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.begin[aa] === data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.begin[a] &amp;&amp; data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[aa] === "+" &amp;&amp; level[aa] &gt; -9) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[aa] = level[aa] + 2;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (aa &gt; data.begin[a]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ei.length &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ei[ei.length - 1] &gt; -1) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>endExtraInd();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[a - 2] === ":" &amp;&amp; data.token[a - 4] === "where") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>itemcount[itemcount.length - 1] = itemcount[itemcount.length - 1] + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if ((data.token[data.begin[a]] === "(" || data.token[data.begin[a]] === "x(") &amp;&amp; options.lang !== "jsx" &amp;&amp; data.stack[a] !== "global" &amp;&amp; (data.types[a - 1] !== "literal" || data.token[a - 2] !== "+" || (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a - 1] === "literal" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] === "+" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a - 3] !== "literal"))) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "reference" &amp;&amp; data.types[a - 2] === "word" &amp;&amp; "var-let-const-from".indexOf(data.token[a - 2]) &lt; 0 &amp;&amp; (data.types[a - 3] === "end" || data.token[a - 3] === ";")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>wordlist[wordlist.length - 1] = true;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (wordlist[wordlist.length - 1] === true || data.stack[a] === "notation") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (destruct[destruct.length - 1] === true &amp;&amp; itemcount[itemcount.length - 1] &gt; 4 &amp;&amp; (data.stack[a] === "array" || data.stack[a] === "object")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destructfix(true, true);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.stack[a] === "object") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (destruct[destruct.length - 1] === true &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.types[data.begin[a] - 1] !== "word" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.types[data.begin[a] - 1] !== "reference" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[data.begin[a] - 1] !== "(" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[data.begin[a] - 1] !== "x(") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>const bb = data.begin[a];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>let aa = a - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.begin[aa] === bb) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[aa] === ",") <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>break;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[aa] === ":") <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>break;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (aa &gt; bb);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if ((data.types[a - 1] === "word" || data.types[a - 1] === "reference") &amp;&amp; data.token[a - 2] === "for") <em class="s6">{</em> //This is for Volt templates<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (destruct[destruct.length - 1] === false || (data.token[a - 2] === "+" &amp;&amp; ltype === "literal" &amp;&amp; level[a - 2] &gt; 0 &amp;&amp; (ltoke.charAt(0) === "\"" || ltoke.charAt(0) === "'"))) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.stack[a] === "method") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[a - 2] === "+" &amp;&amp; (ltoke.charAt(0) === "\"" || ltoke.charAt(0) === "'") &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.token[a - 3]<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.charAt(0) === "\"" || data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.token[a - 3]<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.charAt(0) === "'")) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level.push(indent + 2);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>return;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[a - 2] !== "+") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>return;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (list[list.length - 1] === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c] === "end") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c] === "start") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (d === -1) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "[" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c + 1] !== "]" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c + 2] !== "]") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (destruct[destruct.length - 1] === false || arrbreak[arrbreak.length - 1] === true) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>level[c] = indent;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em> else if (methtest === false &amp;&amp; destruct[destruct.length - 1] === true) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>level[c] = -20;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[a - 2] === "+" &amp;&amp; ltype === "literal" &amp;&amp; level[a - 2] &gt; 0 &amp;&amp; (ltoke.charAt(0) === "\"" || ltoke.charAt(0) === "'")) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>d = a - 2;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>do <em class="s11">{</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>if (data.token[d] !== "+") <em class="s12">{</em><em class="line">&#xA;</em></li><li class="l12"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>break;<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><em class="s12">}</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>if (data<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>.token[d - 1]<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>.charAt(0) !== "\"" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>.token[d - 1]<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>.charAt(0) !== "'") <em class="s12">{</em><em class="line">&#xA;</em></li><li class="l12"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>level[d] = -10;<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><em class="s12">}</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>d = d - 2;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><em class="s11">}</em> while (d &gt; c);<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>break;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (arrbreak[arrbreak.length - 1] === true) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>return;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>return;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &gt; -1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (arrbreak[arrbreak.length - 1] === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (destruct[destruct.length - 1] === true &amp;&amp; data.stack[a] !== "object") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === ";" || ctoke === "x;") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (varindex[varindex.length - 1] &gt; -1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let aa = a;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[aa] === ";") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[aa] === ",") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[aa] === "end") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = data.begin[aa];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (aa &gt; 0 &amp;&amp; aa &gt; data.begin[a]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>varindex[varindex.length - 1] = -1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>endExtraInd();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[data.begin[a] - 1] !== "for") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destructfix(false, false);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke === "x;") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>scolon = scolon + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>wordlist[wordlist.length - 1] = false;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.begin[a] &gt; 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[data.begin[a] - 1] === "for" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] !== "for") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>start = function beautify_script_start () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const deep = data.stack[a + 1],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>deeper = (a === 0)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>? data.stack[a]<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>: data.stack[a - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === ")" || ((deeper === "object" || deeper === "array") &amp;&amp; ltoke !== "]")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (deep !== "method" || (deep === "method" &amp;&amp; data.token[a + 1] !== ")" &amp;&amp; data.token[a + 2] !== ")")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ltoke === ")" &amp;&amp; (deep !== "function" || data.token[data.begin[data.begin[a - 1] - 1]] === "(" || data.token[data.begin[data.begin[a - 1] - 1]] === "x(")) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destructfix(false, false);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (data.types[a + 1] !== "end" &amp;&amp; data.types[a + 2] !== "end") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>list.push(false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>extraindent.push([]);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>assignlist.push(false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>arrbreak.push(false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>wordlist.push(false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>itemcount.push(0);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (options.neverflatten === true || options.lang === "qml" || deep === "attribute" || ltype === "generic" || (deep === "class" &amp;&amp; ltoke !== "(" &amp;&amp; ltoke !== "x(") || (ctoke === "[" &amp;&amp; data.token[a + 1] === "function")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>destruct.push(false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (deep === "expression" || deep === "method") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct.push(true);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if ((deep === "object" || deep === "class") &amp;&amp; (ltoke === "(" || ltoke === "x(" || ltype === "word" || ltype === "reference")) <em class="s6">{</em> //array or object literal following `return` or `(`<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct.push(true);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (deep === "array" || ctoke === "(" || ctoke === "x(") <em class="s6">{</em> //array, method, paren<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct.push(true);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctoke === "{" &amp;&amp; deep === "object" &amp;&amp; ltype !== "operator" &amp;&amp; ltype !== "start" &amp;&amp; ltype !== "literal" &amp;&amp; deeper !== "object" &amp;&amp; deeper !== "array" &amp;&amp; a &gt; 0) <em class="s6">{</em> //curly brace not in a list and not assigned<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct.push(true);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em> //not destructured (multiline)<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct.push(false);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke !== "(" &amp;&amp; ctoke !== "x(" &amp;&amp; data.stack[a + 1] !== "attribute") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "{" || ctoke === "x{") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>varindex.push(-1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[a - 1] !== "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ltype === "markup") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (options.braces === true &amp;&amp; ltype !== "operator" &amp;&amp; ltoke !== "return") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (deep === "function" || ltoke === ")" || ltoke === "x)" || ltoke === "," || ltoke === "}" || ltype === "markup") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (ltoke === "{" || ltoke === "x{" || ltoke === "[" || ltoke === "}" || ltoke === "x}") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (deep === "object") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (options.formatObject === "indent") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (options.formatObject === "inline") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destruct[destruct.length - 1] = true;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (deep === "switch") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (options.nocaseindent === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(indent - 1);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (destruct[destruct.length - 1] === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ltype !== "word" &amp;&amp; ltype !== "reference") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "(" || ctoke === "x(") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "-" &amp;&amp; (data.token[a - 2] === "(" || data.token[a - 2] === "x(")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 2] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "end" &amp;&amp; deeper !== "if" &amp;&amp; deeper !== "for" &amp;&amp; deeper !== "catch" &amp;&amp; deeper !== "else" &amp;&amp; deeper !== "do" &amp;&amp; deeper !== "try" &amp;&amp; deeper !== "finally" &amp;&amp; deeper !== "catch") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[a - 1] === "comment") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "async") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (deep === "method" || (data.token[a - 2] === "function" &amp;&amp; ltype === "reference")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ltoke === "import" || ltoke === "in" || options.functionname === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if ((ltoke === "}" &amp;&amp; data.stack[a - 1] === "function") || ltype === "word" || ltype === "reference") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (deeper !== "method" &amp;&amp; deep !== "method") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "+" &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2]<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.charAt(0) === "\"" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2]<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.charAt(0) === "'")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "}" || ltoke === "x}") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if ((ltoke === "-" &amp;&amp; (a &lt; 2 || (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== ")" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== "x)" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== "]" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a - 2] !== "reference" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a - 2] !== "literal"))) || (options.space === false &amp;&amp; ltoke === "function")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "[") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "[") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>list[list.length - 2] = true;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "return" || ltoke === "var" || ltoke === "let" || ltoke === "const") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.types[a - 1] !== "comment" &amp;&amp; data.stack[a - 1] !== "attribute" &amp;&amp; (ltype === "end" || ltype === "word" || ltype === "reference")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ltoke === "[" || ltoke === "{" || ltoke === "x{") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.stack[a] === "attribute") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.formatArray === "indent") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.formatArray === "inline") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct[destruct.length - 1] = true;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (deep === "method" || destruct[destruct.length - 1] === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let c = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === "]") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === ",") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &lt; b);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>end = function beautify_script_end () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ei = (extraindent[extraindent.length - 1] === undefined)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>? []<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>: extraindent[extraindent.length - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === ")" &amp;&amp; data.token[a + 1] === "." &amp;&amp; ei[ei.length - 1] &gt; -1 &amp;&amp; data.token[ei[0]] !== ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let c = data.begin[a],<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>d = false,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>e = false;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &gt; 0 &amp;&amp; level[c] &lt; -9);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>d = (level[c] === indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>c = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === "{") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>e = true;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.begin[c] === data.begin[a + 1] &amp;&amp; (data.types[c] === "separator" || data.types[c] === "end")) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &lt; b);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (d === false &amp;&amp; e === true &amp;&amp; extraindent.length &gt; 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>extraindent[extraindent.length - 2].push(data.begin[a]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.token[a + 1] === "," &amp;&amp; (data.stack[a] === "object" || data.stack[a] === "array")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((data.token[a + 1] === "}" || data.token[a + 1] === "]") &amp;&amp; (data.stack[a] === "object" || data.stack[a] === "array") &amp;&amp; data.token[data.begin[a] - 1] === ",") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.stack[a] !== "attribute") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke !== ")" &amp;&amp; ctoke !== "x)" &amp;&amp; (ltype !== "markup" || (ltype === "markup" &amp;&amp; data.token[a - 2] !== "return"))) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke === "}" &amp;&amp; data.stack[a] === "switch" &amp;&amp; options.nocaseindent === false) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "}" || ctoke === "x}") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[a - 1] !== "comment" &amp;&amp; ltoke !== "{" &amp;&amp; ltoke !== "x{" &amp;&amp; ltype !== "end" &amp;&amp; ltype !== "literal" &amp;&amp; ltype !== "separator" &amp;&amp; ltoke !== "++" &amp;&amp; ltoke !== "--" &amp;&amp; (a &lt; 2 || data.token[a - 2] !== ";" || data.token[a - 2] !== "x;" || ltoke === "break" || ltoke === "return")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = a - 1,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = 1,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>assign = false,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>listlen = list.length;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c] === "end") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c] === "start") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (d === 1) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "=" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === ";" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "x;") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>assign = true;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (c &gt; 0 &amp;&amp; data.token[c] === "return" &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === ")" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === "x)" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === "{" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === "x{" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === "}" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === "x}" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === ";" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c - 1] === "x;")) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if ((data.token[c] === ":" &amp;&amp; ternary.length === 0) || (data.token[c] === "," &amp;&amp; assign === false)) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if ((c === 0 || data.token[c - 1] === "{" || data.token[c - 1] === "x{") || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "for" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "if" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "do" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "function" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "while" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "var" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "let" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "const" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "with") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (list[listlen - 1] === false &amp;&amp; listlen &gt; 1 &amp;&amp; (a === b - 1 || (data.token[a + 1] !== ")" &amp;&amp; data.token[a + 1] !== "x)")) &amp;&amp; data.stack[a] !== "object") <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &gt; -1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>varindex.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (options.bracepadding === false &amp;&amp; ctoke !== "}" &amp;&amp; ltype !== "markup") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (options.bracepadding === true &amp;&amp; ltype !== "start" &amp;&amp; ltoke !== ";" &amp;&amp; (level[data.begin[a]] &lt; -9 || destruct[destruct.length - 1] === true)) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[data.begin[a]] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (options.lang === "qml") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "start" || ctoke === ")" || ctoke === "x)") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data.stack[a] === "attribute") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data.stack[a] === "array" &amp;&amp; (ei.length &gt; 0 || arrbreak[arrbreak.length - 1] === true)) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>endExtraInd();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[data.begin[a]] = indent + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if ((data.stack[a] === "object" || (data.begin[a] === 0 &amp;&amp; ctoke === "}")) &amp;&amp; ei.length &gt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>endExtraInd();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[data.begin[a]] = indent + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctoke === ")" || ctoke === "x)") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.wrap &gt; 0 &amp;&amp; ctoke === ")") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let len = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>short = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>first = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>inc = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>comma = false,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>array = false,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>wrap = options.wrap,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>open = data.begin[a],<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ind = (indent + 1),<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>exl = ei.length,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ready = false,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>mark = false,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>tern = false;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (level[open] &lt; -9) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = open;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (aa &lt; a &amp;&amp; level[aa] &lt; -9);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>first = aa;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>len = len + data.token[aa].length;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (level[aa] === -10) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>len = len + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[aa] === "(" &amp;&amp; short &gt; 0 &amp;&amp; short &lt; wrap - 1 &amp;&amp; first === a) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>short = -1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[aa] === ")") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>inc = inc - 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else if (data.token[aa] === "(") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>inc = inc + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (aa === open &amp;&amp; inc &gt; 0) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>short = len;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (aa &gt; 0 &amp;&amp; level[aa] &lt; -9);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[aa + 1] === ".") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>ind = level[aa] + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (len &gt; wrap - 1 &amp;&amp; ltoke !== "(" &amp;&amp; short !== -1 &amp;&amp; destruct[destruct.length - 2] === false) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if ((data.token[open - 1] === "if" &amp;&amp; list[list.length - 1] === true) || data.token[open - 1] !== "if") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[open] = ind;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[open - 1] === "for") <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>aa = open;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>do <em class="s11">{</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>if (data.token[aa] === ";" &amp;&amp; data.begin[aa] === open) <em class="s12">{</em><em class="line">&#xA;</em></li><li class="l12"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>level[aa] = ind;<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><em class="s12">}</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><em class="s11">}</em> while (aa &lt; a);<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = a;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>len = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (open &lt; 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>open = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.stack[aa] === "function") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = data.begin[aa];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (data.begin[aa] === open) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[aa] === "?") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>tern = true;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else if (data.token[aa] === "," &amp;&amp; comma === false) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>comma = true;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (len &gt;= wrap) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>ready = true;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else if (data.types[aa] === "markup" &amp;&amp; mark === false) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>mark = true;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (level[aa] &gt; -9 &amp;&amp; data.token[aa] !== "," &amp;&amp; data.types[aa] !== "markup") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>len = 0;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (level[aa] === -10) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>len = len + 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>len = len + data.token[aa].length;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (len &gt;= wrap &amp;&amp; (comma === true || mark === true)) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>ready = true;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (level[aa] &gt; -9) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>len = 0;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>len = len + data.token[aa].length;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (len &gt;= wrap &amp;&amp; (comma === true || mark === true)) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>ready = true;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (aa &gt; open &amp;&amp; ready === false);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (((comma === true || mark === true) &amp;&amp; len &gt;= wrap) || level[open] &gt; -9) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (tern === true) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>ind = level[open];<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[open - 1] === "[") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>aa = a;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>do <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>if (data<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>.types[aa] === "end" || data<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>.token[aa] === "," || data<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>.token[aa] === ";") <em class="s11">{</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>break;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><em class="s11">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em> while (aa &lt; b);<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[aa] === "]") <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>ind = ind - 1;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>array = true;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (exl &gt; 0 &amp;&amp; ei[exl - 1] &gt; aa) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>ind = ind - exl;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>aa = a;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = aa - 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.begin[aa] === open) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa]<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.indexOf("=") &gt; -1 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.types[aa] === "operator" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa]<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.indexOf("!") &lt; 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa]<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.indexOf("==") &lt; 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa] !== "&lt;=" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa]<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.indexOf("&gt;") &lt; 0) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>len = aa;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>do <em class="s11">{</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>len = len - 1;<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>if (data.begin[len] === open &amp;&amp; (data.token[len] === ";" || data.token[len] === "," || len === open)) <em class="s12">{</em><em class="line">&#xA;</em></li><li class="l12"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><span class="l11">    </span>break;<em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span><em class="s12">}</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><em class="s11">}</em> while (len &gt; open);<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em> else if (data.token[aa] === ",") <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>level[aa] = ind;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em> else if (level[aa] &gt; -9 &amp;&amp; array === false &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[open - 1] !== "for" || data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa + 1] === "?" || data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[aa + 1] === ":") &amp;&amp; (data.token[data.begin[a]] !== "(" || data.token[aa] !== "+")) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>level[aa] = level[aa] + 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else if (level[aa] &gt; -9 &amp;&amp; array === false) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[aa] = level[aa] + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (aa &gt; open);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[open] = ind;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = ind - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[data.begin[a] - 1] === "+" &amp;&amp; level[data.begin[a]] &gt; -9) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[data.begin[a] - 1] = -10;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (destruct[destruct.length - 1] === true) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke === "]" &amp;&amp; data.begin[a] - 1 &gt; 0 &amp;&amp; data.token[data.begin[data.begin[a] - 1]] === "[") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destruct[destruct.length - 2] = false;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.begin[a] &lt; level.length) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[data.begin[a]] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.types[a - 1] === "comment" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[a - 1]<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.substr(0, 2) === "//") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[a - 2] === "x}") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 3] = indent + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data.types[a - 1] !== "comment" &amp;&amp; ((ltoke === "{" &amp;&amp; ctoke === "}") || (ltoke === "[" &amp;&amp; ctoke === "]"))) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke === "}" &amp;&amp; options.lang === "titanium") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctoke === "]") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if ((list[list.length - 1] === true &amp;&amp; destruct[destruct.length - 1] === false) || (ltoke === "]" &amp;&amp; level[a - 2] === indent + 1)) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[data.begin[a]] = indent + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (level[a - 1] === -10) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[data.begin[a] + 1] === "function") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (list[list.length - 1] === false) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ltoke === "}" || ltoke === "x}") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = a - 1,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[c] === "]") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[c] === "[") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (d === 0) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (c &gt; 0 &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[c + 1] === "{" || data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[c + 1] === "x{" || data<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>.token[c + 1] === "[")) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>level[c] = indent + 1;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>break;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[c + 1] !== "[" || lastlist === false) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>level[c] = -20;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>break;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (d === 1 &amp;&amp; data.token[c] === "+" &amp;&amp; level[c] &gt; 1) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[c] = level[c] - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &gt; -1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctoke === "}" || ctoke === "x}" || list[list.length - 1] === true) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke === "}" &amp;&amp; ltoke === "x}" &amp;&amp; data.token[a + 1] === "else") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 2] = indent + 2;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>endExtraInd();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>lastlist = list[list.length - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>list.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>extraindent.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>arrbreak.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>itemcount.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>wordlist.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>destruct.pop();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>assignlist.pop();<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>operator = function beautify_script_operator () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ei = (extraindent[extraindent.length - 1] === undefined)<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>? []<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>: extraindent[extraindent.length - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ei.length &gt; 0 &amp;&amp; ei[ei.length - 1] &gt; -1 &amp;&amp; data.stack[a] === "array") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>arrbreak[arrbreak.length - 1] = true;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke !== ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[data.begin[a]] !== "(" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[data.begin[a]] !== "x(" &amp;&amp; destruct<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.length &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ctoke !== "?" &amp;&amp; data.token[ei[ei.length - 1]] === ".") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = a,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = data.begin[c],<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>e = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.begin[c] === d) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c + 1] === "{" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c + 1] === "[" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "function") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "," || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === ";" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.types[c] === "end" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === ":") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>ei.pop();<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[c] === "?" || data.token[c] === ":") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (data.token[ei[ei.length - 1]] === "." &amp;&amp; e &lt; 2) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>ei[ei.length - 1] = d + 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[c] === ".") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>e = e + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &lt; b);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "!" || ctoke === "...") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "}" || ltoke === "x}") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === ";" || ltoke === "x;") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[data.begin[a] - 1] !== "for") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "*") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "function" || ltoke === "yield") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "?") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.lines[a] === 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a - 2] === "word" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== "return" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== "in" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== "instanceof" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] !== "typeof" &amp;&amp; ltype === "reference") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[a + 1] === "word" || data.types[a + 1] === "reference" || ((data.token[a + 1] === "(" || data.token[a + 1] === "x(") &amp;&amp; data.token[a - 2] === "new")) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[a + 1] === "word" || data.types[a + 1] === "reference") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>return;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[a + 1] === ":") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.ternaryline === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = a - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &gt; -1 &amp;&amp; level[c] &lt; -9);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ei.push(a);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ternary.push(a);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (level[c] === indent &amp;&amp; data.token[c + 1] !== ":") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ei.push(a);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[data.begin[a]] === "(" &amp;&amp; (ei.length &lt; 2 || ei[0] === ei[1])) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>destruct[destruct.length - 1] = false;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (a - 2 === data.begin[a]) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[data.begin[a]] = indent - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[data.begin[a]] = indent;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = a - 2;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.types[c] === "end" &amp;&amp; level[c - 1] &gt; -1) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (level[c] &gt; -1) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[c] = level[c] + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (c &gt; data.begin[a]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === ":") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 2] === "where" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a - 2] === data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a]) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "reference" &amp;&amp; data.token[data.begin[a]] !== "(" &amp;&amp; data.token[data.begin[a]] !== "x(") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if ((ltoke === ")" || ltoke === "x)") &amp;&amp; data.token[data.begin[a - 1] - 2] === "function") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.stack[a] === "attribute") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[data.begin[a]] !== "(" &amp;&amp; data.token[data.begin[a]] !== "x(" &amp;&amp; (ltype === "reference" || ltoke === ")" || ltoke === "]" || ltoke === "?") &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "map" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a] === "class" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a + 1] === "reference") &amp;&amp; (ternary.length === 0 || ternary[ternary.length - 1] &lt; data.begin[a]) &amp;&amp; ("mapclassexpressionmethodglobalparen".indexOf(data.stack[a]) &gt; -1 || (data.types[a - 2] === "word" &amp;&amp; data.stack[a] !== "switch"))) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.stack[a] === "switch" &amp;&amp; (ternary.length &lt; 1 || ternary[ternary.length - 1] &lt; data.begin[a])) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ternary.length &gt; 0 &amp;&amp; ternary[ternary.length - 1] &gt; data.begin[a]) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = a,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = data.begin[a];<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.begin[c] === d) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[c] === "," || data.token[c] === ";") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.token[c] === "?") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>ternary.pop();<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>endExtraInd();<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &gt; d);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.stack[a] === "object") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ternary.length &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "++" || ctoke === "--") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "literal" || ltype === "reference") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (a &lt; b - 1 &amp;&amp; (data.types[a + 1] === "literal" || data.types[a + 1] === "reference")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "+") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "start") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.wrap &lt; 1 || data.token[data.begin[a]] === "x(") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let line = 0,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>next = 0,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = a,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ind = indent + 2,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>aa = data.token[a + 1],<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>meth = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (aa === undefined) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[a - 1] === "operator" || data.types[a - 1] === "start") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[a + 1] === "reference" || aa === "(" || aa === "[") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (Number(aa.slice(1, -1)) &gt; -1 &amp;&amp; ((/\d/)<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.test(aa.charAt(1)) === true || aa<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.charAt(1) === "." || aa<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.charAt(1) === "-" || aa<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.charAt(1) === "+")) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[data.begin[a]] === "(") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (c === data.begin[a]) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>meth = line;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.token[c] === "," &amp;&amp; data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.begin[c] === data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.begin[a] &amp;&amp; list[list.length - 1] === true) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (line &gt; options.wrap - 1) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (level[c] &gt; -9) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.types[c] === "operator" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[c] !== "=" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[c] !== "+" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.begin[c] === data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.begin[a]) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>line = line + data.token[c].length;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (c === data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.begin[a] &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[c] === "[" &amp;&amp; line &lt; options<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.wrap - 1) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === "." &amp;&amp; level[c] &gt; -9) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (level[c] === -10) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>line = line + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &gt; 0);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (meth &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>meth = meth + aa.length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>line = line + aa.length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>next = c;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (line &gt; options.wrap - 1 &amp;&amp; level[c] &lt; -9) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>next = next - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (next &gt; 0 &amp;&amp; level[next] &lt; -9);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[next + 1] === "." &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.begin[a] &lt;= data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.begin[next]) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ind = ind + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.token[next] === "+") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ind = level[next];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>next = aa.length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (line + next &lt; options.wrap) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[data.begin[a]] === "(" &amp;&amp; (data.token[ei[0]] === ":" || data.token[ei[0]] === "?")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ind = indent + 3;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.stack[a] === "method") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[data.begin[a]] = indent;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (list[list.length - 1] === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ind = indent + 3;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>ind = indent + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.stack[a] === "object" || data.stack[a] === "array") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>destructfix(true, false);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[c] === "var" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[c] === "let" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[c] === "const") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>line = line -(options<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.insize * options<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.inchar<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.length * 2);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (meth &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = options.wrap - meth;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = options.wrap - line;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (c &gt; 0 &amp;&amp; c &lt; 5) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(ind);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.charAt(0) === "\"" || data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.charAt(0) === "'") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.length &gt; options<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.wrap) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>strwrap(0);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>return;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.token[data.begin[a]] !== "(" || meth &gt; options.wrap - 1 || meth === 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (meth &gt; 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>line = meth;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (line - aa.length &lt; options.wrap - 1 &amp;&amp; (aa.charAt(0) === "\"" || aa.charAt(0) === "'")) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>line = line + 3;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (line - aa.length &gt; options.wrap - 4) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level.push(ind);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>return;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(ind);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.types[a - 1] !== "comment") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltoke === "(") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctoke === "*" &amp;&amp; data.stack[a] === "object" &amp;&amp; data.types[a + 1] === "reference" &amp;&amp; (ltoke === "{" || ltoke === ",")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctoke !== "?" || ternary.length === 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.indexOf("=") &gt; -1 &amp;&amp; ctoke !== "==" &amp;&amp; ctoke !== "===" &amp;&amp; ctoke !== "!=" &amp;&amp; ctoke !== "!==" &amp;&amp; ctoke !== "&gt;=" &amp;&amp; ctoke !== "&lt;=" &amp;&amp; ctoke !== "=&gt;" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.stack[a] !== "method" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.stack[a] !== "object") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let c = a + 1,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>d = 0,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>e = false,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>f = "";<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if ((data.token[data.begin[a]] === "(" || data.token[data.begin[a]] === "x(") &amp;&amp; data.token[a + 1] !== "function") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[c] === "start") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (e === true &amp;&amp; data.token[c] !== "[") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (assignlist[assignlist.length - 1] === true) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>assignlist[assignlist.length - 1] = false;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[c] === "end") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (d &lt; 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (assignlist[assignlist.length - 1] === true) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>assignlist[assignlist.length - 1] = false;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (d === 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>f = data.token[c];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (e === true) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.types[c] === "operator" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === ";" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "x;" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "?" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "var" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "let" || data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[c] === "const") <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (f !== undefined &amp;&amp; (f === "?" || (f.indexOf("=") &gt; -1 &amp;&amp; f !== "==" &amp;&amp; f !== "===" &amp;&amp; f !== "!=" &amp;&amp; f !== "!==" &amp;&amp; f !== "&gt;=" &amp;&amp; f !== "&lt;="))) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>if (assignlist[assignlist.length - 1] === false) <em class="s11">{</em><em class="line">&#xA;</em></li><li class="l11"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><span class="l10">    </span>assignlist[assignlist.length - 1] = true;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span><em class="s11">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if ((f === ";" || f === "x;" || f === "var" || f === "let" || f === "const") &amp;&amp; assignlist[assignlist.length - 1] === true) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>assignlist[assignlist.length - 1] = false;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>break;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (assignlist[assignlist.length - 1] === true &amp;&amp; (f === "return" || f === "break" || f === "continue" || f === "throw")) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>assignlist[assignlist.length - 1] = false;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (f === ";" || f === "x;" || f === ",") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>e = true;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &lt; b);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((ctoke === "-" &amp;&amp; ltoke === "return") || ltoke === "=") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltype === "operator" &amp;&amp; data.types[a + 1] === "reference" &amp;&amp; ltoke !== "--" &amp;&amp; ltoke !== "++" &amp;&amp; ctoke !== "&amp;&amp;" &amp;&amp; ctoke !== "||") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>reference = function beautify_script_reference () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const hoist = function beautify_script_reference_hoist () <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let func = data.begin[a];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (func &lt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>scopes.push([data.token[a], -1]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.stack[func + 1] !== "function") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>func = data.begin[func];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (func &gt; -1 &amp;&amp; data.stack[func + 1] !== "function");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>scopes.push([data.token[a], func]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em>;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltype !== "separator" &amp;&amp; ltype !== "start" &amp;&amp; ltype !== "end") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "word" || ltype === "operator") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === "var") <em class="s5">{</em> // hoisted references following declaration keyword<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>hoist();<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltoke === "function") <em class="s5">{</em> // &amp;&amp; (data.token[a - 2] === "=" || data.types[a - 2] !== "operator") &amp;&amp; data.types[a - 2] !== "start" &amp;&amp; data.types[a - 2] !== "end") {<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>scopes.push([data.token[a], a]);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltoke === "let" || ltoke === "const") <em class="s5">{</em> // not hoisted references following declaration keyword<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>scopes.push([data.token[a], a]);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (data.stack[a] === "arguments") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>scopes.push([data.token[a], a]);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltoke === ",") <em class="s5">{</em> // references following a comma, must be tested to see if a declaration list<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let index = a;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>index = index - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (index &gt; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.begin[a] &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[index] !== "var" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[index] !== "let" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[index] !== "const");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[index] === "var") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>hoist();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.token[index] === "let" || data.token[index] === "const") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>scopes.push([data.token[a], a]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>word = function beautify_script_word () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((ltoke === ")" || ltoke === "x)") &amp;&amp; data.stack[a] === "class" &amp;&amp; (data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[data.begin[a - 1] - 1] === "static" || data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[data.begin[a - 1] - 1] === "final" || data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[data.begin[a - 1] - 1] === "void")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[data.begin[a - 1] - 1] = -10;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === "]") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltoke === "}" || ltoke === "x}") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "else" &amp;&amp; ltoke === "}" &amp;&amp; data.token[a - 2] === "x}") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 3] = level[a - 3] - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "new") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let apiword = [<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"ActiveXObject",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"ArrayBuffer",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"AudioContext",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Canvas",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"CustomAnimation",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"DOMParser",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"DataView",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Date",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Error",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"EvalError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"FadeAnimation",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"FileReader",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Flash",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Float32Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Float64Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"FormField",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Frame",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Generator",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"HotKey",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Image",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Iterator",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Intl",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Int16Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Int32Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Int8Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"InternalError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Loader",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Map",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"MenuItem",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"MoveAnimation",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Notification",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"ParallelArray",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Point",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Promise",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Proxy",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"RangeError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Rectangle",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"ReferenceError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Reflect",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"RegExp",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"ResizeAnimation",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"RotateAnimation",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Set",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"SQLite",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"ScrollBar",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Set",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Shadow",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"StopIteration",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Symbol",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"SyntaxError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Text",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"TextArea",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Timer",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"TypeError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"URL",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Uint16Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Uint32Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Uint8Array",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Uint8ClampedArray",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"URIError",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"WeakMap",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"WeakSet",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Web",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"Window",<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>"XMLHttpRequest"<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (apiword.indexOf(data.token[a + 1]) &lt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>news = news + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.jsscope !== "none") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>data.token[a] = "&lt;strong class='new'&gt;new&lt;/strong&gt;";<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "from" &amp;&amp; ltype === "end" &amp;&amp; a &gt; 0 &amp;&amp; (data.token[data.begin[a - 1] - 1] === "import" || data.token[data.begin[a - 1] - 1] === ",")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "this" &amp;&amp; options.jsscope !== "none") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>data.token[a] = "&lt;strong class='new'&gt;this&lt;/strong&gt;";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "function") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (options.space === false &amp;&amp; a &lt; b - 1 &amp;&amp; (data.token[a + 1] === "(" || data.token[a + 1] === "x(")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ltype === "literal" &amp;&amp; ltoke.charAt(ltoke.length - 1) === "{" &amp;&amp; options.bracepadding === false) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ltoke === "-" &amp;&amp; a &gt; 1) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.types[a - 2] === "operator" || data.token[a - 2] === ",") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.types[a - 2] === "start") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 2] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctoke === "while" &amp;&amp; (ltoke === "}" || ltoke === "x}")) <em class="s5">{</em> //verify if this is a do/while block<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>let c = a - 1,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>d = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === "}" || data.token[c] === "x}") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === "{" || data.token[c] === "x{") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (d === 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.token[c - 1] === "do") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>break;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>c = c - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (c &gt; -1);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctoke === "in" || (((ctoke === "else" &amp;&amp; options.elseline === false) || ctoke === "catch") &amp;&amp; (ltoke === "}" || ltoke === "x}"))) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> else if (ctoke === "var" || ctoke === "let" || ctoke === "const") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>varindex[varindex.length - 1] = a;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (ltype === "end") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level[a - 1] = indent;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>if (data.token[data.begin[a] - 1] !== "for") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>let c = a + 1,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>d = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c] === "end") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.types[c] === "start") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>d = d + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (d &lt; 0 || (d === 0 &amp;&amp; (data.token[c] === ";" || data.token[c] === ","))) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>c = c + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (c &lt; b);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[c] === ",") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>indent = indent + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if ((ctoke === "default" || ctoke === "case") &amp;&amp; ltype !== "word" &amp;&amp; data.stack[a] === "switch") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = indent - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "catch" &amp;&amp; ltoke === ".") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (ctoke === "catch" || ctoke === "finally") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level[a - 1] = -10;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (options<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.bracepadding === false &amp;&amp; a &lt; b - 1 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.token[a + 1]<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>.charAt(0) === "}") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (data.stack[a] === "object" &amp;&amp; (ltoke === "{" || ltoke === ",") &amp;&amp; (data.token[a + 1] === "(" || data.token[a + 1] === "x(")) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>return;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>if (options.lang === "titanium") <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>indent = indent - 1;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>do <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (data.lexer[a] === lexer) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>ctype = data.types[a];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>ctoke = data.token[a];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (ctype === "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>comment();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "regex") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "literal") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>literal();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "separator") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>separator();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "start") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>start();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "end") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>end();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "operator") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>operator();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "word") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>word();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "reference") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>reference();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "markup") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>markup();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype.indexOf("template") === 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>template();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (ctype === "generic") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (ltoke !== "return" &amp;&amp; ltoke.charAt(0) !== "#" &amp;&amp; ltype !== "operator" &amp;&amp; ltoke !== "public" &amp;&amp; ltoke !== "private" &amp;&amp; ltoke !== "static" &amp;&amp; ltoke !== "final" &amp;&amp; ltoke !== "implements" &amp;&amp; ltoke !== "class" &amp;&amp; ltoke !== "void") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level[a - 1] = -20;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.token[a + 1] === "(" || data.token[a + 1] === "x(") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-20);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(-10);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (ctype !== "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ltype = ctype;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>ltoke = ctoke;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (data.lexer[a - 1] === lexer) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>skip = a;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.lexer[skip + 1] === lexer &amp;&amp; data.lexer[data.begin[skip + 1]] === lexer) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>skip = skip + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (skip &lt; b);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(skip + 1);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>level.push(skip);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><em class="s4">}</em> while (a &lt; b);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>return level;<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><em class="s3">}</em>()),<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span>output = (function beautify_script_output () <em class="s3">{</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>const build = [],<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>len = levels.length,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>tab = (function beautify_script_output_tab () <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const ch = options.inchar,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>tabby = [];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let index = options.insize;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>do <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>tabby.push(ch);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>index = index - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> while (index &gt; 0);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>return tabby.join("");<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>()),<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>lf = (options.crlf === true)<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>? "\r\n"<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>: "\n",<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>pres = options.preserve,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>nl = function beautify_script_output_outnl (tabs) <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>const linesout = [],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>total = Math.min(data.lines[a + 1] - 1, pres);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>let index = 0;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (tabs &lt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>tabs = 0;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>do <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>linesout.push(lf);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>index = index + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em> while (index &lt; total);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>if (tabs &gt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>index = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>linesout.push(tab);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>index = index + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (index &lt; tabs);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l3">    </span>return linesout.join("");<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s4">}</em>,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>invisibles = ["x;", "x}", "x{", "x(", "x)"];<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>let a = options.start,<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>external = "",<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>lastLevel = 0;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>if (options.jsscope !== "none" &amp;&amp; options.lang === "javascript") <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>let linecount = 1,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>last = "",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>scope = 0,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>scoped = [],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>indent = options.inlevel,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>foldindex = [];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>const code = [],<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>foldstart = function beautify_script_output_scope_foldstart () <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>let index = code.length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>index = index - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> while (index &gt; 0 &amp;&amp; code[index] !== "&lt;li&gt;");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (code[index] === "&lt;li&gt;") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code[index] = `&lt;li class="fold" title="folds from line ${ linecount} to line xxx"&gt;`;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code[index + 1] = `-${ code[index + 1]}`;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>foldindex.push([index, a]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>foldend = function beautify_script_output_scope_foldend () <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (foldindex.length &lt; 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>const lastfold = foldindex[foldindex.length - 1];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (data.types[a] === "end" &amp;&amp; lastfold[1] === data.begin[a]) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code[lastfold[0]] = code[lastfold[0]].replace("xxx", String(linecount));<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>foldindex.pop();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> else if (data.types[a - 1] === "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code[lastfold[0]] = code[lastfold[0]].replace("xxx", String(linecount - 1));<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>foldindex.pop();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>reference = function beautify_script_output_scope_reference () <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>let i = 0,<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>s = scopes.length - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (data.stack[a] === "arguments") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (scopes[s - 1][1] &gt; a) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>s = s - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (s &gt; 0 &amp;&amp; scopes[s][1] &gt; a);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (scopes[s][1] === a) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scopes[s].push(scope + 1);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>s = s - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (s &gt; -1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>build.push(`&lt;em class="s${ scope + 1 }"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>.stack[a + 2] === "arguments" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 1] === "let" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 1] === "const" || data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>.token[a - 1] === "var") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (s &gt; 0 &amp;&amp; scopes[s - 1][1] &gt; a) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>s = s - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (s &gt; 0 &amp;&amp; scopes[s][1] &gt; a);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (scopes[s][1] === a) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scopes[s].push(scope);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>break;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>s = s - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (s &gt; -1);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>build.push(`&lt;em class="s${ scope}"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (s &gt; 0 &amp;&amp; scopes[s - 1][1] &gt; a) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>s = s - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (s &gt; 0 &amp;&amp; scopes[s][1] &gt; a);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (scopes[s][0] === data.token[a]) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (scopes[s].length === 2) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>build.push(`&lt;em class="s${ scope}"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>scopes[s].push(scope);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>build.push(`&lt;em class="s${ scopes[s][2]}"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>return;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>s = s - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (scopes[s][0] === data.token[a]) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>i = scopes[s][1];<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (i === -1) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="s0"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (i === data.begin[a]) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="s${ scope}"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (scopes[s].length &lt; 3) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="s${ scope}"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scopes[s].push(scope);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="s${ scopes[s][2]}"&gt;${ data.token[a]}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>return;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> while (s &gt; 0);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>build.push(data.token[a]);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="c0">                        // splits block comments, which are single tokens, into multiple lines of output<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>blockline = function beautify_script_output_scope_blockline (x) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>const commentLines = x.split(lf),<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>ii = commentLines.length - 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>let hh = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (data.lines[a] &gt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code.push("&lt;li&gt;");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code.push(String(linecount));<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code.push("&lt;/li&gt;");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>linecount = linecount + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (data.types[a + 1] === "comment") <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.push("&lt;li&gt;");<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.push(String(linecount));<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.push("&lt;/li&gt;");<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>linecount = linecount + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>commentLines[hh] = commentLines[hh] + "&lt;em class=\"line\"&gt;&amp;#xA;&lt;/em&gt;&lt;/li&gt;&lt;li class=\"c0\"&gt;";<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>hh = hh + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (hh &lt; ii);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>return commentLines.join("");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="c0">                        //a function for calculating indentation after each new line<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>nlscope = function beautify_script_output_scope_nlscope (x) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>let dd = 0;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>const scopepush = function beautify_script_output_scope_nlscope_scopepush () <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>let aa = 0,<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>bb = 0;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (x &gt; 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;span class="l${ bb}"&gt;${ tab}&lt;/span&gt;`);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (scoped[aa] === true) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>bb = bb + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>aa = aa + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (aa &lt; x);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em>;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>if (data.token[a] !== "x}" || (data.token[a] === "x}" &amp;&amp; data.token[a + 1] !== "}")) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>linecount = linecount + 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code.push("&lt;li&gt;");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code.push(String(linecount));<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>code.push("&lt;/li&gt;");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>if (a &lt; len - 1 &amp;&amp; data.types[a + 1] === "comment") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>build.push("&lt;em class=\"line\"&gt;&amp;#xA;&lt;/em&gt;&lt;/li&gt;&lt;li class=\"c0\"&gt;");<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(tab);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>dd = dd + 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (dd &lt; levels[a]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.token[a + 1] === "}" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.stack[a + 1] !== "object" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.stack[a + 1] !== "class") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="line"&gt;&amp;#xA;&lt;/em&gt;&lt;/li&gt;&lt;li class="l${ scope - 1 }"&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="line"&gt;&amp;#xA;&lt;/em&gt;&lt;/li&gt;&lt;li class="l${ scope}"&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>scopepush();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>scopepush();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>multiline = function beautify_script_output_scope_multiline (x) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>const temparray = x.split(lf),<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>d = temparray.length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>let c = 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>build.push(temparray[0]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>nlscope(indent);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>build.push(temparray[c]);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><span class="l5">    </span>c = c + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l4">    </span><em class="s6">}</em> while (c &lt; d);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s5">}</em>;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>code.push("&lt;div class=\"beautify\" data-prettydiff-ignore=\"true\"&gt;&lt;ol class=\"count\"&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>code.push("&lt;li&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>code.push("1");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>code.push("&lt;/li&gt;");<em class="line">&#xA;</em></li><li class="c0">                    //if (options.vertical === true) {<em class="line">&#xA;</em></li><li class="c0">                    //    vertical();<em class="line">&#xA;</em></li><li class="c0">                    //}<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>.types[a] === "comment" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>.indexOf("/*") === 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>build.push("&lt;ol class=\"data\"&gt;&lt;li class=\"c0\"&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>build.push("&lt;ol class=\"data\"&gt;&lt;li&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (indent &gt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>do <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.push(tab);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> while (a &lt; indent);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>scope = 0;<em class="line">&#xA;</em></li><li class="c0">                    // this loops combines the white space as determined from the algorithm with the<em class="line">&#xA;</em></li><li class="c0">                    // tokens to create the output<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>a = 0;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>do <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (levels[a] &gt; -1 &amp;&amp; a &lt; len - 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (levels[a] &lt; scoped.length) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scoped.pop();<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (levels[a] &lt; scoped.length);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.types[a] === "comment" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>.indexOf("/*") === 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.push(blockline(data.token[a]));<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (invisibles.indexOf(data.token[a]) &lt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[a] === "start" &amp;&amp; (levels[a] &gt; -1 || data.types[a + 1] === "comment")) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>foldstart();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.indexOf("//") === 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[a + 1]<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.indexOf("//") === 0 &amp;&amp; levels[a - 1] &gt; -1) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>foldstart();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (data.types[a] === "end") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>foldend();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (foldindex<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.length &gt; 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.indexOf("//") !== 0 &amp;&amp; data<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.token[foldindex[foldindex.length - 1][1]]<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>.indexOf("//") === 0) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>foldend();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (data.types[a] === "reference") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>reference();<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (data.token[a] === "{") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.stack[a + 1] === "object" || data.stack[a + 1] === "class") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scoped.push(false);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push("{");<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (scoped.length === levels[a]) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>if (scoped[scoped.length - 1] === false) <em class="s10">{</em><em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>scoped[scoped.length - 1] = true;<em class="line">&#xA;</em></li><li class="l10"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><span class="l9">    </span>scope = scope + 1;<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span><em class="s10">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> else <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>scoped.push(true);<em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>scope = scope + 1;<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="s${ scope}"&gt;{&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (levels[a] &gt; scoped.length) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>do <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>scoped.push(false);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em> while (levels[a] &gt; scoped.length);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else if (data.token[a] === "}") <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data.stack[a] === "object" || data.stack[a] === "class") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push("}");<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(`&lt;em class="s${ scope}"&gt;}&lt;/em&gt;`);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scope = scope - 1;<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>if (data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.types[a] === "string" &amp;&amp; data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.indexOf("\n") &gt; 0) <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>multiline(data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.replace(/&amp;/g, "&amp;amp;")<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.replace(/&lt;/g, "&amp;lt;")<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.replace(/&gt;/g, "&amp;gt;"));<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else if (data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.types[a] === "operator" || data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.types[a] === "comment" || data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.types[a] === "string" || data<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>.types[a] === "regex") <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(data<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.token[a]<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.replace(/&amp;/g, "&amp;amp;")<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.replace(/&lt;/g, "&amp;lt;")<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>.replace(/&gt;/g, "&amp;gt;"));<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> else <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>if (data.types[a] === "start" &amp;&amp; levels[a] &gt; -1) <em class="s9">{</em><em class="line">&#xA;</em></li><li class="l9"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><span class="l8">    </span>scoped.push(false);<em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span><em class="s9">}</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>build.push(data.token[a]);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (levels[a] === -10) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.push(" ");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (levels[a] &gt; -1 &amp;&amp; a &lt; len - 1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (levels[a] &gt; scoped.length) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>do <em class="s8">{</em><em class="line">&#xA;</em></li><li class="l8"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><span class="l7">    </span>scoped.push(false);<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span><em class="s8">}</em> while (levels[a] &gt; scoped.length);<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>nlscope(levels[a]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em> while (a &lt; len);<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>a = build.length - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>do <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (build[a] === tab) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.pop();<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>break;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>a = a - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em> while (a &gt; -1);<em class="line">&#xA;</em></li><li class="c0">                    //this logic is necessary to some line counting corrections to the HTML output<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>last = build[build.length - 1];<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (last.indexOf("&lt;li") &gt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>build[build.length - 1] = "&lt;em class=\"line\"&gt;&amp;#xA;&lt;/em&gt;&lt;/li&gt;";<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em> else if (last.indexOf("&lt;/li&gt;") &lt; 0) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>build.push("&lt;em class=\"line\"&gt;&amp;#xA;&lt;/em&gt;&lt;/li&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>build.push("&lt;/ol&gt;&lt;/div&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>last = build.join("");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (last.match(/&lt;li/g) !== null) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>scope = last.match(/&lt;li/g).length;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (linecount - 1 &gt; scope) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>linecount = linecount - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>do <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.pop();<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.pop();<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.pop();<em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>linecount = linecount - 1;<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> while (linecount &gt; scope);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>code.push("&lt;/ol&gt;");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (options.jsscope === "html") <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>code.push(last);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (options.newline === true) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>if (options.crlf === true) <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.push("\r\n");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em> else <em class="s7">{</em><em class="line">&#xA;</em></li><li class="l7"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><span class="l6">    </span>code.push("\n");<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span><em class="s7">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>return code.join("");<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>return [<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>"&lt;p&gt;Scope analysis does not provide support for undeclared variables.&lt;/p&gt;",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>"&lt;p&gt;&lt;em&gt;",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>scolon,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>"&lt;/em&gt; instances of &lt;strong&gt;missing semicolons&lt;/strong&gt; counted.&lt;/p&gt;",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>"&lt;p&gt;&lt;em&gt;",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>news,<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>"&lt;/em&gt; unnecessary instances of the keyword &lt;strong&gt;new&lt;/strong&gt; counted.&lt;/p&gt;",<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>code.join(""),<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>last<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>]<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>.join("")<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>.replace(/(\s+)$/, "")<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>.replace(options.binaryCheck, "");<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>do <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>if (data.lexer[a] === lexer || prettydiff.beautify[data.lexer[a]] === undefined) <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (invisibles.indexOf(data.token[a]) &lt; 0) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.push(data.token[a]);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>if (levels[a] &gt; -1) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>lastLevel = levels[a];<em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.push(nl(levels[a]));<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em> else if (levels[a] === -10) <em class="s6">{</em><em class="line">&#xA;</em></li><li class="l6"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><span class="l5">    </span>build.push(" ");<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span><em class="s6">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em> else <em class="s5">{</em><em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>options.end = levels[a];<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>options.inlevel = lastLevel + 1;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>options.start = a;<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>external = nl(lastLevel + 1) + prettydiff.beautify[data.lexer[a]](options).replace(/\s+$/, "") + nl(lastLevel);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>build.push(external);<em class="line">&#xA;</em></li><li class="l5"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><span class="l4">    </span>a = levels[a] - 1;<em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span><em class="s5">}</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>a = a + 1;<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><em class="s4">}</em> while (a &lt; len);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>if (options<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>.newline === true &amp;&amp; options<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>.end === data<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>.token<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>.length) <em class="s4">{</em><em class="line">&#xA;</em></li><li class="l4"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><span class="l3">    </span>build.push(lf);<em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span><em class="s4">}</em><em class="line">&#xA;</em></li><li class="l3"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><span class="l2">    </span>return build.join("");<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span><span class="l2">    </span><em class="s3">}</em>());<em class="line">&#xA;</em></li><li class="l2"><span class="l0">    </span><span class="l1">    </span>return output;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><em class="s2">}</em>;<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span>global<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>.prettydiff<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>.beautify<em class="line">&#xA;</em></li><li class="l1"><span class="l0">    </span><span class="l1">    </span>.script = script;<em class="line">&#xA;</em></li><li class="l0"><em class="s1">}</em>());<em class="line">&#xA;</em></li></ol></div>