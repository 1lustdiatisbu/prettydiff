<package id="hello_world">
    <job id="main">
        <named name="mode" type="string" default="diff"/>
        <named name="source" type="string" required="true"/>
        <named name="diff" type="string" default=""/>
        <named name="lang" type="string" default="auto"/>
        <named name="context" type="string" default=""/>
        <named name="sourcelabel" type="string" default="base"/>
        <named name="difflabel" type="string" default="new"/>
        <named name="diffview" type="string" default="sidebyside"/>
        <named name="topcoms" type="boolean" default="false"/>
        <named name="csvchar" type="string" default=","/>
        <named name="insize" type="number" default="4"/>
        <named name="inchar" type="string" default=" "/>
        <named name="indent" type="string" default="knr"/>
        <named name="quote" type="boolean" default="false"/>
        <named name="semicolon" type="boolean" default="false"/>
        <named name="comments" type="string" default="indent"/>
        <named name="style" type="string" default="indent"/>
        <named name="html" type="boolean" default="false"/>
        <named name="content" type="boolean" default="false"/>
        <named name="force_indent" type="boolean" default="false"/>
        <named name="output" type="string"/>
        <named name="directory" type="boolean" default="false"/>
        <script type="text/javascript" src="prettydiff.js">
            (function () {
                "use strict";
                var x = {},
                    y = {},
                    a = {},
                    b = {},
                    c = [],
                    d = "",
                    e = {},
                    f = {},
                    g = {},
                    h = [],
                    i = "",
                    j = 0,
                    k = 0,
                    l = 0,
                    m = 0,
                    n = [],
                    pd = [],
                    output = "",
                    error = [],
                    fso = {},
                    file = {},
                    fail = false,
                    shell = {};
                if (prettydiff === undefined) {
                    if (typeof WScript.StdOut.WriteLine === "unknown" || WScript.StdOut.WriteLine === null) {
                        WScript.Echo("The prettydiff function is undefined./nThis likely means the prettydiff.js file cannot be resolved.");
                    } else {
                        WScript.StdOut.WriteLine("The prettydiff function is undefined.");
                        WScript.StdOut.WriteLine("This likely means the prettydiff.js file cannot be resolved at its specified location.");
                    }
                    fail = true;
                }
                error.push("Error: Source file is required.");
                error.push("Usage: cscript " + WScript.ScriptName + " /source:\"myFile.xml\" /diff:\"myOtherFile.xml\" /output:\"outFile.xml\"");
                error.push("Usage: cscript " + WScript.ScriptName + " /source:\"myFile.xml\" /mode:\"beautify\" /output:\"outFile.xml\"");
                error.push("");
                error.push("");
                error.push("Arguments      - Type    - Definition");
                error.push("-------------------------------------");
                error.push("* source       - string  - The file source for interpretation. This is required.");
                error.push("");
                error.push("* mode         - string  - The operation to be performed. Defaults to 'diff'.");
                error.push("                           Accepted values: diff, beautify, minify.");
                error.push("");
                error.push("* diff         - string  - The file to be compared to the source file. This is required if mode is 'diff'.");
                error.push("");
                error.push("* output       - string  - The file to store the output. If this argument is absent the output will appear on the command line. If the file specified does not exist it will be created.");
                error.push("");
                error.push("* lang         - string  - The programming language of the source file. Defauls to auto.");
                error.push("                           Accepted values: auto, markup, javascript, css, html, csv, text");
                error.push("");
                error.push("* context      - number  - This shortens the diff output by allowing a specified number of equivalent lines between each line of difference. Defaults to an empty string, which nullifies its use.");
                error.push("");
                error.push("* sourcelabel  - string  - This allows for a descriptive label of the source file code of the diff HTML output. Defaults to 'base'.");
                error.push("");
                error.push("* difflabel    - string  - This allows for a descriptive label for the diff file code of the diff HTML output. Defaults to 'new'.");
                error.push("");
                error.push("* diffview     - string  - This determines whether the diff HTML output should display as a side-by-side comparison or if the differences should display in a single table column. Defaults to 'sidebyside'.");
                error.push("                           Accepted values: sidebyside, inline");
                error.push("");
                error.push("* topcoms      - boolean - If mode is 'minify' this determines whether comments above the first line of code should be kept.");
                error.push("");
                error.push("* csvchar      - string  - The character to be used as a separator if lang is 'csv'. Any string combination is accepted. Defaults to a comma ','.");
                error.push("");
                error.push("* insize       - number  - The number of characters to comprise a single indentation. Defaults to '4'.");
                error.push("");
                error.push("* inchar       - string  - The string characters to comprise a single indentation. Any string combination is accepted. Defaults to space ' '.");
                error.push("");
                error.push("* indent       - string  - If lang is 'javascript' and mode is 'beautify' this determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. Defaults to 'knr'.");
                error.push("                           Accepted values: knr, allman");
                error.push("");
                error.push("* quote        - boolean - If true and mode is 'diff' then all single quote characters will be replaced by double quote characters in both the source and diff file input so as to eliminate some differences from the diff report HTML output.");
                error.push("");
                error.push("* semicolon    - boolean - If true and mode is 'diff' and lang is 'javascript' all semicolon characters that immediately preceed any white space containing a new line character will be removed so as to elimate some differences from the diff report HTML output.");
                error.push("");
                error.push("* comments     - string  - If mode is 'beautify' this will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code. Default is 'indent'.");
                error.push("                           Accepted values: indent, noindent");
                error.push("");
                error.push("* style        - string  - If mode is 'beautify' and lang is 'markup' or 'html' this will determine whether the contents of script and style tags should always start at position 0 of each line or if such content should be indented starting from the opening script or style tag. Default is 'indent'.");
                error.push("                           Accepted values: indent, noindent");
                error.push("");
                error.push("* html         - boolean - If lang is 'markup' this will provide an override so that some tags are treated as singletons and not start tags, such as '<br>' opposed to '<br/>'.");
                error.push("");
                error.push("* content      - boolean - If true and mode is 'diff' this will normalize all string literals in JavaScript to 'text' and all content in markup to 'text' so as to eliminate some differences from the HTML diff report. Default is false.");
                error.push("");
                error.push("* force_indent - boolean - If lang is 'markup' this will force indentation upon all content and tags without regard for the creation of new text nodes. Default is false.");
                error.push("");
                error.push("* output       - string  - The location of the output file. If the file does not exist it will be created. If this argument is missing output will print to screen.");
                if (typeof WScript.Arguments.Named("source") !== "string") {
                    if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                        k = error.length;
                        for (j = 0; j < k; j += 1) {
                            if (error[j].length > 80) {
                                for (l = 80; l > 0; l -= 1) {
                                    if (error[j].charAt(l) === " ") {
                                        WScript.StdOut.WriteLine(error[j].substring(0, l));
                                        error[j] = error[j].substr(l);
                                        break;
                                    }
                                }
                                if (error[j].length > 53) {
                                    do {
                                        for (l = 54; l > 0; l -= 1) {
                                            if (error[j].charAt(l) === " ") {
                                                if (l === 54) {
                                                    WScript.StdOut.Write("                          " + error[j].substring(0, l));
                                                } else {
                                                    WScript.StdOut.WriteLine("                          " + error[j].substring(0, l));
                                                }
                                                error[j] = error[j].substr(l);
                                                break;
                                            }
                                        }
                                    } while (error[j].length > 54);
                                    if (error[j].length === 54) {
                                        WScript.StdOut.Write("                          " + error[j]);
                                    } else {
                                        WScript.StdOut.WriteLine("                          " + error[j]);
                                    }
                                }
                            } else {
                                WScript.StdOut.WriteLine(error[j]);
                            }
                        }
                    } else {
                        WScript.Echo(error.join("|prettybreak|").replace(/\s+/g, " ").replace(/\|prettybreak\|/g, "\n").replace(/\s+Accepted/g, "\n   Accepted"));
                    }
                    fail = true;
                } else {
                    x = WScript.Arguments.Named("source");
                    a = new ActiveXObject("Scripting.FileSystemObject").GetFile(x);
                    b = a.OpenAsTextStream(1, 0);
                    while (!b.AtEndOfStream) {
                        c.push(b.ReadLine());
                    }
                    b.Close();
                    d = c.join("\n");
                    e.source = d;
                }
                if (!fail) {
                    e.mode = WScript.Arguments.Named("mode");
                    e.lang = WScript.Arguments.Named("lang");
                    e.context = WScript.Arguments.Named("context");
                    e.sourcelabel = WScript.Arguments.Named("sourcelabel");
                    e.difflabel = WScript.Arguments.Named("difflabel");
                    e.diffview = WScript.Arguments.Named("diffview");
                    e.topcoms = WScript.Arguments.Named("topcoms");
                    e.csvchar = WScript.Arguments.Named("csvchar");
                    e.insize = WScript.Arguments.Named("insize");
                    e.inchar = WScript.Arguments.Named("inchar");
                    e.indent = WScript.Arguments.Named("indent");
                    e.quote = WScript.Arguments.Named("quote");
                    e.semicolon = WScript.Arguments.Named("semicolon");
                    e.comments = WScript.Arguments.Named("comments");
                    e.style = WScript.Arguments.Named("style");
                    e.html = WScript.Arguments.Named("html");
                    e.content = WScript.Arguments.Named("content");
                    e.force_indent = WScript.Arguments.Named("force_indent");
                    if (e.mode !== "diff" && e.mode !== "beautify" && e.mode !== "minify") {
                        e.mode = "diff";
                    }
                    if (e.mode === "diff") {
                        if (WScript.Arguments.Named("diff") === "string") {
                            y = WScript.Arguments.Named("diff");
                            f = new ActiveXObject("Scripting.FileSystemObject").GetFile(y);
                            g = f.OpenAsTextStream(1, 0);
                            while (!g.AtEndOfStream) {
                                h.push(g.ReadLine());
                            }
                            g.Close();
                            i = h.join("\n");
                            e.diff = i;
                        } else if (!fail) {
                            e[0] = "Error: Diff file is required unless mode is set to \"beautify\" or \"minify\".";
                            if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                                k = error.length;
                                for (j = 0; j < k; j += 1) {
                                    if (error[j].length > 80) {
                                        for (l = 80; l > 0; l -= 1) {
                                            if (error[j].charAt(l) === " ") {
                                                WScript.StdOut.WriteLine(error[j].substring(0, l));
                                                error[j] = error[j].substr(l);
                                                break;
                                            }
                                        }
                                        if (error[j].length > 53) {
                                            do {
                                                for (l = 54; l > 0; l -= 1) {
                                                    if (error[j].charAt(l) === " ") {
                                                        if (l === 54) {
                                                            WScript.StdOut.Write("                          " + error[j].substring(0, l));
                                                        } else {
                                                            WScript.StdOut.WriteLine("                          " + error[j].substring(0, l));
                                                        }
                                                        error[j] = error[j].substr(l);
                                                        break;
                                                    }
                                                }
                                            } while (error[j].length > 54);
                                            if (error[j].length === 54) {
                                                WScript.StdOut.Write("                          " + error[j]);
                                            } else {
                                                WScript.StdOut.WriteLine("                          " + error[j]);
                                            }
                                        }
                                    } else {
                                        WScript.StdOut.WriteLine(error[j]);
                                    }
                                }
                            } else {
                                WScript.Echo(error.join("|prettybreak|").replace(/\s+/g, " ").replace(/\|prettybreak\|/g, "\n").replace(/\s+Accepted/g, "\n   Accepted"));
                            }
                            fail = true;
                        }
                    } else {
                        e.diff = "";
                    }
                }
                if (!fail) {
                    if (isNaN(Number(e.context))) {
                        e.context = "";
                    }
                    if (e.html === "true") {
                        e.html = true;
                    }
                    if (e.content === "true") {
                        e.content = true;
                    }
                    if (e.force_indent === "true") {
                        e.force_intent = true;
                    }
                    if (!isNaN(e.insize)) {
                        e.insize = Number(e.insize);
                    }
                    pd = prettydiff(e);
                    if (typeof WScript.Arguments.Named("output") === "string") {
                        output = WScript.Arguments.Named("output");
                        fso = WScript.CreateObject("Scripting.FileSystemObject");
                        shell = WScript.CreateObject("WScript.Shell");
                        if (fso.FolderExists(output)) {
                            file = fso.OpenTextFile(output);
                        } else {
                            file = fso.CreateTextFile(output);
                        }
                        file.WriteLine(pd[0]);
                        file.Close();
                    } else {
                        if (typeof WScript.StdOut.WriteLine === "unknown" || WScript.StdOut.WriteLine === null) {
                            WScript.Echo(pd[0]);
                        } else {
                            WScript.StdOut.WriteLine(pd[0]);
                        }

                    }
                }
            }());
        </script>
    </job>
</package>