<package id="prettydiff_package">
    <job id="main">
        <script type="text/javascript">
            var global = {};
            global.prettydiff.meta      = {
                error: "",
                lang: ["", "", ""],
                time: "",
                insize: 0,
                outsize: 0,
                difftotal: 0,
                difflines: 0
            };
        </script>
        <script type="text/javascript" src="../lib/global.js"></script>
        <script type="text/javascript" src="../lib/language.js"></script>
        <script type="text/javascript" src="../lib/options.js"></script>
        <script type="text/javascript" src="../lib/safeSort.js"></script>
        <script type="text/javascript" src="../lib/csspretty.js"></script>
        <script type="text/javascript" src="../lib/csvpretty.js"></script>
        <script type="text/javascript" src="../lib/diffview.js"></script>
        <script type="text/javascript" src="../lib/finalFile.js"></script>
        <script type="text/javascript" src="../lib/jspretty.js"></script>
        <script type="text/javascript" src="../lib/markuppretty.js"></script>
        <script type="text/javascript" src="../prettydiff.js">
        /*global WScript, Enumerator*/
        (function () {
            "use strict";
            var args       = {},
                pd         = "",
                read       = "file",
                fail       = false,
                filestring = {},
                help       = (typeof WScript.Arguments.Named("help") === "string"),
                ext        = (WScript.Arguments.Named("extensions") === undefined)
                    ? [""]
                    : (function () {
                        var a = WScript
                            .Arguments
                            .Named("extensions");
                        a = a.replace(/,\s+/g, ",");
                        return a.split(",");
                    }()),
                html       = global.prettydiff.finalFile.order,
                lf         = "\n",
                outerror   = function (x) {
                    fail = true;
                    if (x !== undefined) {
                        return WScript.StdOut.WriteLine(x);
                    }
                    if (WScript.Arguments.Count() === 0 || help === true) {
                        return WScript.StdOut.WriteLine(options.functions.consolePrint());
                    }
                },
                openfile   = function (x, y) {
                    var a = WScript.CreateObject("Scripting.FileSystemObject"),
                        b = {},
                        c = [],
                        d = {};
                    if (a.FileExists(x) === true) {
                        d = a.GetFile(x);
                        b = d.OpenAsTextStream(1, 0);
                        while (b.AtEndOfStream === false) {
                            c.push(b.ReadLine());
                        }
                        b.Close();
                        return c.join(lf);
                    }
                    if (y === "source") {
                        outerror("Source file cannot be found.");
                    }
                    outerror("Diff file cannot be found.");
                },
                opendir    = function (x, y) {
                    var a = WScript.CreateObject("Scripting.FileSystemObject"),
                        d = {},
                        e = {},
                        f = {},
                        g = [],
                        h = "",
                        i = 0,
                        j = ext.length,
                        k = "";
                    x = x.replace(/\\/g, "\\\\");
                    if (a.FolderExists(x) === true) {
                        d = a.GetFolder(x);
                        e = d.Files;
                        f = new Enumerator(e);
                        for (f = f; f.atEnd() === false; f.moveNext()) {
                            h = f
                                .item()
                                .name;
                            if (ext[0] === "") {
                                g.push(h + lf);
                            } else {
                                for (i = 0; i < j; i += 1) {
                                    k = "." + ext[i];
                                    if (h.indexOf(k) === h.length - k.length) {
                                        g.push(openfile(f.item()));
                                    }
                                }
                            }
                        }
                        return;
                    }
                    if (y === "source") {
                        outerror("Source directory cannot be found.");
                    }
                    outerror("Diff directory cannot be found.");
                },
                output     = "",
                fso        = {},
                file       = [
                    {}, {}
                ],
                //shell = {},
                color = "",
                report     = "";
            if (global.prettydiff.prettydiff === undefined) {
                if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                    WScript
                        .StdOut
                        .WriteLine("The prettydiff function is undefined or not locally available.");
                    WScript
                        .StdOut
                        .WriteLine("This likely means the prettydiff.js file cannot be resolved at its specified loc" +
                                "ation.");
                } else {
                    WScript.Echo("The prettydiff function is undefined./nThis likely means the prettydiff.js file " +
                            "cannot be resolved.");
                }
                fail = true;
            }
            /*read = WScript.Arguments.Named("readmethod") || "file";
                        if (read !== "file" && read !== "directory" && read !== "subdirectory") {
                            read = "file";
                        }*/
            if (typeof WScript.Arguments.Named("source") === "string") {
                if (read === "file") {
                    filestring  = [openfile(WScript.Arguments.Named("source"), "source")];
                    args.source = filestring.toString();
                } else if (read === "directory") {
                    //args.source = opendir(WScript.Arguments.Named("source"), "source");
                    opendir(WScript.Arguments.Named("source"), "source");
                }
            } else {
                outerror("Error: Source file is required.");
            }
            if (fail === false) {
                args.api             = "wsf";
                args.attributetoken  = (WScript.Arguments.Named("attributetoken") === "true" || WScript.Arguments.Named("attributetoken") === true);
                args.brace_style     = (WScript.Arguments.Named("braceline") === "collapse" || WScript.Arguments.Named("braceline") === "collapse-preserve-inline"  || WScript.Arguments.Named("braceline") === "expand")
                    ? args.brace_style
                    : none;
                args.braceline       = (WScript.Arguments.Named("braceline") === "true" || WScript.Arguments.Named("braceline") === true);
                args.bracepadding    = (WScript.Arguments.Named("bracepadding") === "true" || WScript.Arguments.Named("bracepadding") === true);
                args.braces          = (WScript.Arguments.Named("indent") === "allman")
                    ? "allman"
                    : "knr";
                args.comments        = (WScript.Arguments.Named("comments") === "noindent")
                    ? "noindent"
                    : "indent";
                args.commline        = (WScript.Arguments.Named("commline") === "true" || WScript.Arguments.Named("commline") === true);
                args.conditional     = (WScript.Arguments.Named("conditional") === "true" || WScript.Arguments.Named("conditional") === true);
                args.content         = (WScript.Arguments.Named("content") === "true" || WScript.Arguments.Named("content") === true);
                args.context         = (isNaN(WScript.Arguments.Named("context")))
                    ? ""
                    : Number(WScript.Arguments.Named("context"));
                args.correct         = (WScript.Arguments.Named("correct") === "true" || WScript.Arguments.Named("correct") === true);
                args.crlf            = (WScript.Arguments.Named("crlf") === "true" || WScript.Arguments.Named("crlf") === true);
                args.cssinsertlines  = (WScript.Arguments.Named("cssinsertlines") === "true" || WScript.Arguments.Named("cssinsertlines") === true);
                args.csvchar         = (WScript.Arguments.Named("csvchar") || ",");
                args.diffcomments    = (WScript.Arguments.Named("diffcomments") === "true" || WScript.Arguments.Named("diffcomments") === true);
                args.difflabel       = (WScript.Arguments.Named("difflabel") || "new");
                args.diffspaceignore = (WScript.Arguments.Named("diffspaceignore") === "true" || WScript.Arguments.Named("diffspaceignore") === true);
                args.diffview        = (WScript.Arguments.Named("diffview") === "inline")
                    ? "inline"
                    : "sidebyside";
                args.dustjs          = (WScript.Arguments.Named("dustjs") === "true" || WScript.Arguments.Named("dustjs") === true);
                args.elseline        = (WScript.Arguments.Named("elseline") === "true" || WScript.Arguments.Named("elseline") === true);
                args.endcomma        = (WScript.Arguments.Named("endcomma") === "true" || WScript.Arguments.Named("endcomma") === true || WScript.Arguments.Named("endcomma") === "always")
                    ? "always"
                    : (WScript.Arguments.Named("endcomma") === "multiline")
                        ? "multiline"
                        : "never";
                args.force_attribute = (WScript.Arguments.Named("force_attribute") === "true" || WScript.Arguments.Named("force_attribute") === true);
                args.force_indent    = (WScript.Arguments.Named("force_indent") === "true" || WScript.Arguments.Named("force_indent") === true);
                args.formatArray     = (WScript.Arguments.Named("formatArray") === "indent" || WScript.Arguments.Named("formatArray") === "inline")
                    ? WScript.Arguments.Named("formatArray")
                    : "default";
                args.formatObject    = (WScript.Arguments.Named("formatObject") === "indent" || WScript.Arguments.Named("formatObject") === "inline")
                    ? WScript.Arguments.Named("formatObject")
                    : "default";
                args.functionname    = (WScript.Arguments.Named("functionname") === "true" || WScript.Arguments.Named("html") === true);
                args.html            = (WScript.Arguments.Named("html") === "true" || WScript.Arguments.Named("html") === true);
                args.inchar          = WScript
                    .Arguments
                    .Named("inchar") || " ";
                args.inlevel         = (isNaN(WScript.Arguments.Named("inlevel")))
                    ? 0
                    : Number(WScript.Arguments.Named("inlevel"));
                args.insize          = (isNaN(WScript.Arguments.Named("insize")))
                    ? 4
                    : Number(WScript.Arguments.Named("insize"));
                args.jekyll          = (WScript.Arguments.Named("jekyll") === "true" || WScript.Arguments.Named("jekyll") === true);
                args.jsscope         = (WScript.Arguments.Named("jsscope") === "html" || WScript.Arguments.Named("jsscope") === "report")
                    ? WScript
                        .Arguments
                        .Named("jsscope")
                    : "none";
                args.lang            = WScript
                    .Arguments
                    .Named("lang") || "auto";
                args.langdefault     = (WScript.Arguments.Named("langdefault") === "markup" || WScript.Arguments.Named("langdefault") === "html" || WScript.Arguments.Named("langdefault") === "css" || WScript.Arguments.Named("langdefault") === "csv" || WScript.Arguments.Named("langdefault") === "javascript")
                    ? WScript
                        .Arguments
                        .Named("langdefault")
                    : "text";
                if (WScript.Arguments.Named("methodchain") === "true" || WScript.Arguments.Named("methodchain") === true || WScript.Arguments.Named("methodchain") === "chain") {
                    args.methodchain = "chain";
                } else if (WScript.Arguments.Named("methodchain") === "none") {
                    args.methodchain = "none";
                } else {
                    args.methodchain = "indent";
                }
                args.miniwrap     = (WScript.Arguments.Named("miniwrap") === "true" || WScript.Arguments.Named("miniwrap") === true);
                args.mode         = (WScript.Arguments.Named("mode") === "beautify" || WScript.Arguments.Named("mode") === "minify" || WScript.Arguments.Named("mode") === "parse" || WScript.Arguments.Named("mode") === "analysis")
                    ? WScript.Arguments.Named("mode")
                    : "diff";
                args.neverflatten = (WScript.Arguments.Named("neverflatten") === "true" || WScript.Arguments.Named("neverflatten") === true);
                args.nocaseindent = (WScript.Arguments.Named("nocaseindent") === "true" || WScript.Arguments.Named("nocaseindent") === true);
                args.nochainindent = (WScript.Arguments.Named("nochainindent") === "true" || WScript.Arguments.Named("nochainindent") === true);
                args.noleadzero   = (WScript.Arguments.Named("noleadzero") === "true" || WScript.Arguments.Named("noleadzero") === true);
                args.objsort      = (WScript.Arguments.Named("objsort") === "all" || WScript.Arguments.Named("objsort") === "css" || WScript.Arguments.Named("objsort") === "markup" || WScript.Arguments.Named("objsort") === "none")
                    ? WScript
                        .Arguments
                        .Named("objsort")
                    : "js";
                args.parseFormat  = (WScript.Arguments.Named("parseFormat") === "sequential" || WScript.Arguments.Named("parseFormat") === "htmltable")
                    ? WScript.Arguments.Named("parseFormat")
                    : "parallel";
                args.parseSpace   = (WScript.Arguments.Named("parseSpace") === "true" || WScript.Arguments.Named("parseSpace") === true);
                args.preserve     = (function () {
                    var pres = WScript.Arguments.Named("preserve");
                    if (pres === 1 || pres === undefined || pres === true || pres === "true" || pres === "all" || pres === "js" || pres === "css") {
                        args.preserve = 1;
                    } else if (pres === "false" || isNaN(pres) === true || Number(pres) < 1 || pres === "none") {
                        args.preserve = 0;
                    } else {
                        args.preserve = Number(pres)
                    }
                }());
                args.quote        = (WScript.Arguments.Named("quote") === "true" || WScript.Arguments.Named("quote") === true);
                args.quoteConvert = (WScript.Arguments.Named("quoteConvert") === "double" || WScript.Arguments.Named("quoteConvert") === "single")
                    ? WScript
                        .Arguments
                        .Named("quoteConvert")
                    : "none";
                args.selectorlist = (WScript.Arguments.Named("selectorlist") === "true" || WScript.Arguments.Named("selectorlist") === true);
                args.semicolon    = (WScript.Arguments.Named("semicolon") === "true" || WScript.Arguments.Named("semicolon") === true);
                args.sourcelabel  = WScript
                    .Arguments
                    .Named("sourcelabel") || "base";
                args.space        = (WScript.Arguments.Named("space") !== "false" && WScript.Arguments.Named("space") !== false);
                args.spaceclose   = (WScript.Arguments.Named("spaceclose") === "true" || WScript.Arguments.Named("spaceclose") === true);
                args.style        = (WScript.Arguments.Named("style"))
                    ? "noindent"
                    : "indent";
                args.styleguide   = (typeof WScript.Arguments.Named("styleguide") === "string")
                    ? WScript
                        .Arguments
                        .Named("styleguide")
                    : "none";
                args.tagname      = (WScript.Arguments.Named("tagmerge") === "true" || WScript.Arguments.Named("tagmerge") === true);
                args.tagsort      = (WScript.Arguments.Named("tagsort") === "true" || WScript.Arguments.Named("tagsort") === true);
                args.textpreserve = (WScript.Arguments.Named("textpreserve") === "true" || WScript.Arguments.Named("textpreserve") === true);
                args.titanium     = (WScript.Arguments.Named("topcoms") === "true" || WScript.Arguments.Named("topcoms") === true);
                args.topcoms      = (WScript.Arguments.Named("topcoms") !== "false" && WScript.Arguments.Named("topcoms") !== false);
                args.unformatted  = (WScript.Arguments.Named("unformatted") !== "false" && WScript.Arguments.Named("unformatted") !== false);
                args.varword      = (WScript.Arguments.Named("varword") === "each" || WScript.Arguments.Named("varword") === "list")
                    ? WScript
                        .Arguments
                        .Named("varword")
                    : "none";
                args.vertical     = (WScript.Arguments.Named("vertical") === "all" || WScript.Arguments.Named("vertical") === "css" || WScript.Arguments.Named("vertical") === "none")
                    ? WScript
                        .Arguments
                        .Named("vertical")
                    : "js";
                args.wrap         = (isNaN(WScript.Arguments.Named("wrap")) === true)
                    ? 80
                    : WScript
                        .Arguments
                        .Named("wrap");
                color             = WScript
                    .Arguments
                    .Named("color") || "shadow";
                args.inchar       = args
                    .inchar
                    .replace(/\\t/g, "\u0009")
                    .replace(/\\n/g, "\u000a")
                    .replace(/\\r/g, "\u000d")
                    .replace(/\\f/g, "\u000c")
                    .replace(/\\b/g, "\u0008");
                if (args.crlf === true) {
                    lf = "\r\n";
                }
                if (args.inlevel < 1) {
                    args.inlevel = 0;
                }
                if (WScript.Arguments.Named("objsort") === "true" || WScript.Arguments.Named("alphasort") === "true") {
                    args.objsort = "all";
                }
                if (WScript.Arguments.Named("preserve") === "true") {
                    args.preserve = "all";
                }
                if (WScript.Arguments.Named("vertical") === "true") {
                    args.vertical = "all";
                }
                if (WScript.Arguments.Named("indent") === "allman") {
                    args.braces = "allman";
                }
                if (args.mode !== "diff" && args.mode !== "beautify" && args.mode !== "minify") {
                    args.mode = "diff";
                    if (args.mode !== "beautify") {
                        args.correct = false;
                    }
                }
                if (args.lang === "tss") {
                    args.titanium = true;
                    args.lang     = "javscript";
                }
                if (args.lang !== "javascript" && args.lang !== "markup" && args.lang !== "html" && args.lang !== "css" && args.lang !== "csv" && args.lang !== "text") {
                    args.lang = "javascript";
                } else if (args.lang === "html") {
                    args.html = true;
                }
                if (args.mode === "diff") {
                    if (typeof WScript.Arguments.Named("diff") === "string") {
                        if (read === "file") {
                            filestring = [openfile(WScript.Arguments.Named("diff"), "diff")];
                            args.diff  = filestring.toString();
                        }
                    } else {
                        outerror("Error: Diff parameter is required unless mode is set to \"beautify\" or \"minify" +
                                "\".");
                    }
                } else {
                    args.diff = "";
                }
            }
            if (fail === false) {
                pd = global.prettydiff.prettydiff(args);
                if (args.mode === "parse" && typeof JSON === "object") {
                    args[0] = JSON.stringify(args[0]);
                }
                if (WScript.Fullname.indexOf("cscript.exe") > -1 && args.mode !== "diff") {
                    html[0] = lf + lf + lf + lf + html[0];
                }
                html[7]  = options.color;
                if (global.prettydiff.meta.error === "" || global.prettydiff.meta.error === undefined) {
                    html[10] = pd;
                } else {
                    html[10] = global.prettydiff.meta.error;
                }
                if (args.jsscope !== "none" && args.mode === "beautify" && (args.lang === "javascript" || args.lang === "auto")) {
                    html[12] = builder.script.beautify;
                    report   = html.join("");
                }
                if (args.mode === "diff") {
                    report = html.join("");
                }
                output = WScript
                    .Arguments
                    .Named("output");
                if (typeof output === "string" && output !== "") {
                    fso = WScript.CreateObject("Scripting.FileSystemObject");
                    //shell = WScript.CreateObject("WScript.Shell");
                    if (fso.FolderExists(output)) {
                        file[0] = fso.OpenTextFile(output);
                    } else {
                        file[0] = fso.CreateTextFile(output);
                    }
                    if (args.mode === "diff" || (args.jsscope !== "none" && args.mode === "beautify" && (args.lang === "javascript" || args.lang === "auto"))) {
                        file[0].WriteLine(report);
                        file[0].Close();
                    } else {
                        file[0].WriteLine(pd);
                        file[0].Close();
                        file[1] = fso.CreateTextFile(output + "-report.html");
                        file[1].WriteLine(report);
                        file[1].Close();
                    }
                } else {
                    if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                        if (args.mode === "diff" || (args.jsscope !== "none" && args.mode === "beautify")) {
                            WScript
                                .StdOut
                                .WriteLine(report);
                        } else {
                            WScript
                                .StdOut
                                .WriteLine(pd);
                        }
                    } else {
                        if (args.mode !== "diff" || (args.jsscope !== "none" && args.mode === "beautify")) {
                            WScript.Echo(report);
                        } else {
                            WScript.Echo(pd);
                        }
                    }
                }
            }
        }());
        </script>
    </job>
</package>
