<package id="prettydiff_package">
    <job id="main">
        <script type="text/javascript">
            var global = {};
            global.meta      = {
                error: "",
                lang: ["", "", ""],
                time: "",
                insize: 0,
                outsize: 0,
                difftotal: 0,
                difflines: 0
            };
        </script>
        <script type="text/javascript" src="../lib/safeSort.js"></script>
        <script type="text/javascript" src="../lib/csspretty.js"></script>
        <script type="text/javascript" src="../lib/csvpretty.js"></script>
        <script type="text/javascript" src="../lib/diffview.js"></script>
        <script type="text/javascript" src="../lib/finalFile.js"></script>
        <script type="text/javascript" src="../lib/jspretty.js"></script>
        <script type="text/javascript" src="../lib/markuppretty.js"></script>
        <script type="text/javascript" src="../prettydiff.js">
        /*global WScript, prettydiff, Enumerator*/
        (function () {
            "use strict";
            var args       = {},
                pd         = "",
                read       = "file",
                fail       = false,
                filestring = {},
                help       = (typeof WScript.Arguments.Named("help") === "string"),
                ext        = (WScript.Arguments.Named("extensions") === undefined)
                    ? [""]
                    : (function () {
                        var a = WScript
                            .Arguments
                            .Named("extensions");
                        a = a.replace(/,\s+/g, ",");
                        return a.split(",");
                    }()),
                builder    = finalFile,
                html       = [
                    builder.html.head, //0
                    builder.css.color.canvas, //1
                    builder.css.color.shadow, //2
                    builder.css.color.white, //3
                    builder.css.reports, //4
                    builder.css.global, //5
                    builder.html.body, //6
                    builder.html.color, //7
                    builder.html.intro, //8
                    "", //9 - for meta analysis, like stats and accessibility
                    "", //10 - for generated report
                    builder.html.script, //11
                    builder.script.diff, //12
                    builder.html.end //13
                ],
                lf         = "\n",
                outerror   = function (x) {
                    var a     = 0,
                        b     = 0,
                        c     = 0,
                        error = [];
                    if (fail === true) {
                        return;
                    }
                    if (WScript.Arguments.Count() === 0 || help === true) {
                        error.push("Arguments      - Type    - Definition");
                        error.push("-------------------------------------");
                        error.push("* attributetoken - boolean - If true markup attributes are provided as separate " +
                                "tokens in the parse table of mode parse. Otherwise attributes are a data propert" +
                                "y of their respective element. Default is false.");
                        error.push("");
                        error.push("* braceline      - boolean - Inserts a newline after an opening curly brace and " +
                                "before a closing curly brace. Default is false.");
                        error.push("");
                        error.push("* bracepadding   - boolean - Inserts a space after the start of a contain and be" +
                                "fore the end of the container in JavaScript if the contents of that container ar" +
                                "e not indented; such as: conditions, function arguments, and escaped sequences o" +
                                "f template strings. Default is false.");
                        error.push("");
                        error.push("* braces         - string  - If lang is 'javascript' and mode is 'beautify' this" +
                                " determines if opening curly braces will exist on the same line as their conditi" +
                                "on or be forced onto a new line. Defaults to 'knr'.");
                        error.push("                   Accepted values: knr, allman");
                        error.push("* color          - string  - The color scheme of the reports. Default is shadow.");
                        error.push("                   Accepted values: canvas, shadow, white");
                        error.push("");
                        error.push("* comments       - string  - If mode is 'beautify' this will determine whether c" +
                                "omments should always start at position 0 of each line or if comments should be " +
                                "indented according to the code. Default is 'indent'.");
                        error.push("                   Accepted values: indent, noindent");
                        error.push("");
                        error.push("* commline       - boolean - If a blank new line should be forced above comments" +
                                " in markup. Default is false.");
                        error.push("");
                        error.push("* conditional    - boolean - If true then conditional comments used by Internet " +
                                "Explorer are preserved at minification of markup. Default is false.");
                        error.push("");
                        error.push("* content        - boolean - If true and mode is 'diff' this will normalize all " +
                                "string literals in JavaScript to 'text' and all content in markup to 'text' so a" +
                                "s to eliminate some differences from the HTML diff report. Default is false.");
                        error.push("");
                        error.push("* context        - number  - This shortens the diff output by allowing a specifi" +
                                "ed number of equivalent lines between each line of difference. Defaults to an em" +
                                "pty string, which nullifies its use.");
                        error.push("");
                        error.push("* correct        - boolean - Automatically correct some sloppiness in JavaScript" +
                                ".  The default is 'false' and it currently only works if mode is 'beautify'.");
                        error.push("");
                        error.push("* crlf           - boolean - If line termination should be Windows (LF) format. " +
                                "Unix (LF) format is the default.");
                        error.push("");
                        error.push("* cssinsertlines - boolean - Inserts new line characters between blocks of CSS c" +
                                "ode. Default is false.");
                        error.push("");
                        error.push("* csvchar        - string  - The character to be used as a separator if lang is " +
                                "'csv'. Any string combination is accepted. Defaults to a comma ','.");
                        error.push("");
                        error.push("* diff           - string  - The file to be compared to the source file. This is" +
                                " required if mode is 'diff'.");
                        error.push("");
                        error.push("* diffcomments   - boolean - If true then comments will be preserved so that bot" +
                                "h code and comments are compared by the diff engine.");
                        error.push("");
                        error.push("* difflabel      - string  - This allows for a descriptive label for the diff fi" +
                                "le code of the diff HTML output. Defaults to 'new'.");
                        error.push("");
                        error.push("* diffspaceignore - boolean - If white space only differences should be ignored " +
                                "by the diff tool. Default is false.");
                        error.push("");
                        error.push("* diffview       - string  - This determines whether the diff HTML output should" +
                                " display as a side-by-side comparison or if the differences should display in a " +
                                "single table column. Defaults to 'sidebyside'.");
                        error.push("                   Accepted values: sidebyside, inline");
                        error.push("");
                        error.push("* dustjs         - boolean - If the provided markup code is a Dust.js template. " +
                                "Takes a boolean and defaults to false.");
                        error.push("");
                        error.push("* elseline       - boolean - The keyword 'else' will be pushed to a new line if " +
                                "this is true. Defaults to false.");
                        error.push("");
                        error.push("* endcomma       - boolean - If there should be a trailing comma in JavaScript a" +
                                "rrays and objects.");
                        error.push("");
                        error.push("* force_attribute - boolean - If all markup attributes should be indented each o" +
                                "nto their own line. Default is false.");
                        error.push("");
                        error.push("* force_indent   - boolean - If lang is 'markup' this will force indentation upo" +
                                "n all content and tags without regard for the creation of new text nodes. Defaul" +
                                "t is false.");
                        error.push("");
                        error.push("* formatArray    - string  - Determines whether JavaScript array indexes should " +
                                "always indented, remain on a single line, or left to the default formatting. Acc" +
                                " epted values are: default, indent, inline");
                        error.push("");
                        error.push("* formatObject   - string  - Determines whether JavaScript object properties sho" +
                                "uld always indented, remain on a single line, or left to the default formatting." +
                                " Accepted values are: default, indent, inline");
                        error.push("");
                        error.push("* functionname   - boolean - If a space should follow a JavaScript function name. Default is false.");
                        error.push("");
                        error.push("* help           - string  - This list of argument definitions. The value is unn" +
                                "ecessary and is required only to pass in use of the parameter.");
                        error.push("");
                        error.push("* html           - boolean - If lang is 'markup' this will provide an override s" +
                                "o that some tags are treated as singletons and not start tags, such as '<br>' op" +
                                "posed to '<br/>'.");
                        error.push("");
                        error.push("* inchar         - string  - The string characters to comprise a single indentat" +
                                "ion. Any string combination is accepted. Defaults to space ' '.");
                        error.push("");
                        error.push("* inlevel        - number  - The number of tabs to pad the output.  Default is '" +
                                "0'.");
                        error.push("");
                        error.push("* insize         - number  - The number of characters to comprise a single inden" +
                                "tation. Defaults to '4'.");
                        error.push("");
                        error.push("* jekyll         - boolean - If YAML Jekyll HTML templates should be supported. Default is false.");
                        error.push("");
                        error.push("* jsscope        - string  - If 'html' JavaScript beautification produces HTML f" +
                                "ormatted output coloring function scope and variables to indicate scope depth an" +
                                "d inheritance. The value 'report' is similar to the value 'html', except that it" +
                                " forms the entirety of an HTML document. Default is 'none', which just returns b" +
                                "eautified JavaScript in text format.");
                        error.push("                   Accepted values: none, report, html");
                        error.push("");
                        error.push("* lang           - string  - The programming language of the source file. Defaul" +
                                "s to auto.");
                        error.push("                   Accepted values: auto, markup, javascript, css, html, csv, te" +
                                "xt");
                        error.push("");
                        error.push("* langdefault    - string  - The fallback value if option lang is provided the v" +
                                "alue 'auto' and the language cannot be detected.");
                        error.push("                   Accepted values: markup, javascript, css, html, csv, text");
                        error.push("");
                        error.push("* methodchain    - string  - Whether consecutive JavaScript methods should be ch" +
                                "ained onto a single line of code instead of indented. Default is 'indent.");
                        error.push("                   Accepted values: chain, indent, none");
                        error.push("");
                        error.push("* miniwrap       - boolean - Whether minified JavaScript should wrap after a spe" +
                                "cified character width. This option requires a value from option 'wrap'.");
                        error.push("");
                        error.push("* mode           - string  - The operation to be performed. Defaults to 'diff'.");
                        error.push("                   Accepted values: analysis, diff, beautify, minify, parse");
                        error.push("");
                        error.push("* neverflatten   - boolean - If destructured lists in JavaScript should never be" +
                                " flattened.");
                        error.push("* nocaseindent   - boolean - If a case statement should receive the same indenta" +
                                "tion as the containing switch block.");
                        error.push("");
                        error.push("* nochainindent  - boolean - If indentation should be prevented for JavaScript m"
                                "ethods broken onto multiple lines.");
                        error.push("");
                        error.push("* noleadzero     - boolean - If in CSS values leading 0s immediately preceeding " +
                                "a decimal should be removed or prevented.");
                        error.push("");
                        error.push("* objsort        - string  - Sorts properties by key name in JavaScript and/or C" +
                                "SS. Defaults to 'js', which sorts JavaScript object properties.");
                        error.push("                   Accepted values: all, css, js, markup, none");
                        error.push("");
                        error.push("* output         - string  - The location of the output file. If the file does n" +
                                "ot exist it will be created. If this argument is missing output will print to sc" +
                                "reen.");
                        error.push("");
                        error.push("* parseFormat    - boolean - When in parse mode if the output should be arrays o" +
                                "f records (sequential), arrays of data types (parallel), or an HTML table.  Defa" +
                                "ult is parallel.");
                        error.push("");
                        error.push("* parseSpace     - boolean - Whether whitespace tokens should be in the generate" +
                                "d parse tree. Default is false.");
                        error.push("");
                        error.push("* preserve       - number  - The number of acceptable empty lines.");
                        error.push("");
                        error.push("* qml             - boolean - Enable syntax support for QML. Default is false. Not supported with minification or option objsort.");
                        error.push("");
                        error.push("* quote          - boolean - If true and mode is 'diff' then all single quote ch" +
                                "aracters will be replaced by double quote characters in both the source and diff" +
                                " file input so as to eliminate some differences from the diff report HTML output" +
                                ".");
                        error.push("");
                        error.push("* quoteConvert   - string  - If strings in JavaScript or attributes in markup sh" +
                                "ould be double quoted, single quoted, or left to the author. Default is 'none'.");
                        error.push("                   Accepted values: double, single, none");
                        error.push("");
                        error.push("* selectorlist   - boolean - If comma separated CSS selectors should be retained" +
                                " on a single line of code.");
                        error.push("");
                        error.push("* semicolon      - boolean - If true and mode is 'diff' and lang is 'javascript'" +
                                " all semicolon characters that immediately preceed any white space containing a " +
                                "new line character will be removed so as to elimate some differences from the di" +
                                "ff report HTML output.");
                        error.push("");
                        error.push("* source         - string  - The file source for interpretation. This is require" +
                                "d.");
                        error.push("");
                        error.push("* sourcelabel    - string  - This allows for a descriptive label of the source f" +
                                "ile code of the diff HTML output. Defaults to 'base'.");
                        error.push("");
                        error.push("* space          - boolean - If false the space after the function keyword is re" +
                                "moved from anonymous functions from JavaScript beautification. The default is tr" +
                                "ue.");
                        error.push("");
                        error.push("* spaceclose     - boolean - If false markup self-closing tags end with '/>' and" +
                                " ' />' if true. Default is false.");
                        error.push("");
                        error.push("* style          - string  - If mode is 'beautify' and lang is 'markup' or 'html" +
                                "' this will determine whether the contents of script and style tags should alway" +
                                "s start at position 0 of each line or if such content should be indented startin" +
                                "g from the opening script or style tag. Default is 'indent'.");
                        error.push("                   Accepted values: indent, noindent");
                        error.push("");
                        error.push("* styleguide     - string  - Applies various options in a batch configuration to" +
                                " better conform to popular styleguides. Default is 'none'.");
                        error.push("                   Accepted values: airbnb, crockford, google, grunt, jquery, me" +
                                "diawiki, yandex, none");
                        error.push("");
                        error.push("* tagmerge       - boolean - Allows immediately adjacement start and end markup " +
                                "tags of the same name to be combined into a single self-closing tag. Default is " +
                                "false.");
                        error.push("");
                        error.push("* tagsort        - boolean - Sort child items of each respective parent element " +
                                "in markup.");
                        error.push("");
                        error.push("* ternaryline    - boolean - If ternary operators in JavaScript (? and :) should" +
                                " remain on the same line.  Defaults to false.");
                        error.push("");
                        error.push("* textpreserve   - boolean - If text in the provided markup code should be prese" +
                                "rved exactly as provided. This option eliminates beautification and wrapping of " +
                                "text content.  Takes a boolean and defaults to false.");
                        error.push("");
                        error.push("* titanium       - boolean - If the JavaScript parser should expect Titanium Sty" +
                                "le Sheets instead of JavaScript. Default is false.");
                        error.push("");
                        error.push("* topcoms        - boolean - If mode is 'minify' this determines whether comment" +
                                "s above the first line of code should be kept. Default is false.");
                        error.push("");
                        error.push("* unformatted    - boolean - If markup tags should have their insides preserved.");
                        error.push("");
                        error.push("* varword        - string  - Can merge consecutive var statements in a single co" +
                                "mma separated list or the oppose. The value 'list' will merge and 'each' is the " +
                                "opposite. Default is 'none'.");
                        error.push("                   Accepted values: each, list, none");
                        error.push("");
                        error.push("* vertical       - string  - If lists of assignments and properties should be ve" +
                                "rtically aligned. Default is 'js'.");
                        error.push("                   Accepted values: all, css, js, none");
                        error.push("");
                        error.push("* wrap           - number  - The number of characters text content in a markup d" +
                                "ocument or a string in JavaScript is allowed before wrapping onto a new line.  D" +
                                "efault is 80. A value of disables text wrapping and a value of -1 will concatena" +
                                "ting JavaScript strings separated by a '+' operator.");
                        error.push("");
                        // error.push("* readmethod   - string  - The readmethod determines the quantity
                        // of files to read. The default value is 'file' which will operate against a
                        // single file. The value 'file' requires that you point to an actual file for
                        // the source and diff arguments. The values 'directory' and 'subdirectory'
                        // require directories for values to source and diff. The value 'directory' will
                        // include all files location in the target directory, but not any child
                        // directories."); error.push("                 Accepted values: file,
                        // directory, subdirectory"); error.push(""); error.push("* extensions   -
                        // string  - If readmethod is 'directory' or 'subdirectory' this will allow
                        // access limits to specified file types. This takes a comma separated list:
                        // /extensions:\"html,css,xml\""); error.push("");
                    }
                    if ((WScript.Arguments.Count() === 1 && help === false) || WScript.Arguments.Count() > 0) {
                        error.push("");
                        error.push(x);
                        error.push("Usage: cscript " + WScript.ScriptName + " /source:\"myFile.xml\" /diff:\"myOtherFile.xml\" /output:\"outFile.xml\"");
                        error.push("Usage: cscript " + WScript.ScriptName + " /source:\"myFile.xml\" /mode:\"beautify\" /output:\"outFile.xml\"");
                        error.push("");
                    }
                    if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                        a = error.length;
                        for (b = 0; b < a; b += 1) {
                            if (error[b].length > 79) {
                                for (c = 79; c > 0; c -= 1) {
                                    if (error[b].charAt(c) === " ") {
                                        WScript
                                            .StdOut
                                            .WriteLine(error[b].substring(0, c));
                                        error[b] = error[b].substr(c);
                                        break;
                                    }
                                }
                                if (error[b].length > 53) {
                                    do {
                                        for (c = 54; c > 0; c -= 1) {
                                            if (error[b].charAt(c) === " ") {
                                                if (c === 54) {
                                                    WScript
                                                        .StdOut
                                                        .Write("                          " + error[b].substring(0, c));
                                                } else {
                                                    WScript
                                                        .StdOut
                                                        .WriteLine("                          " + error[b].substring(0, c));
                                                }
                                                error[b] = error[b].substr(c);
                                                break;
                                            }
                                        }
                                    } while (error[b].length > 54);
                                    if (error[b].length === 54) {
                                        WScript
                                            .StdOut
                                            .Write("                          " + error[b]);
                                    } else {
                                        WScript
                                            .StdOut
                                            .WriteLine("                          " + error[b]);
                                    }
                                }
                            } else {
                                WScript
                                    .StdOut
                                    .WriteLine(error[b]);
                            }
                        }
                    } else {
                        WScript.Echo(error.join("|prettybreak|").replace(/\s+/g, " ").replace(/\|prettybreak\|/g, lf).replace(/\s+Accepted/g, lf + "   Accepted"));
                    }
                    fail = true;
                },
                openfile   = function (x, y) {
                    var a = WScript.CreateObject("Scripting.FileSystemObject"),
                        b = {},
                        c = [],
                        d = {};
                    if (a.FileExists(x) === true) {
                        d = a.GetFile(x);
                        b = d.OpenAsTextStream(1, 0);
                        while (b.AtEndOfStream === false) {
                            c.push(b.ReadLine());
                        }
                        b.Close();
                        return c.join(lf);
                    }
                    if (y === "source") {
                        outerror("Source file cannot be found.");
                    }
                    outerror("Diff file cannot be found.");
                },
                opendir    = function (x, y) {
                    var a = WScript.CreateObject("Scripting.FileSystemObject"),
                        d = {},
                        e = {},
                        f = {},
                        g = [],
                        h = "",
                        i = 0,
                        j = ext.length,
                        k = "";
                    x = x.replace(/\\/g, "\\\\");
                    if (a.FolderExists(x) === true) {
                        d = a.GetFolder(x);
                        e = d.Files;
                        f = new Enumerator(e);
                        for (f = f; f.atEnd() === false; f.moveNext()) {
                            h = f
                                .item()
                                .name;
                            if (ext[0] === "") {
                                g.push(h + lf);
                            } else {
                                for (i = 0; i < j; i += 1) {
                                    k = "." + ext[i];
                                    if (h.indexOf(k) === h.length - k.length) {
                                        g.push(openfile(f.item()));
                                    }
                                }
                            }
                        }
                        return;
                    }
                    if (y === "source") {
                        outerror("Source directory cannot be found.");
                    }
                    outerror("Diff directory cannot be found.");
                },
                output     = "",
                fso        = {},
                file       = [
                    {}, {}
                ],
                //shell = {},
                color = "",
                report     = "";
            global.csspretty    = csspretty;
            global.csvpretty    = csvpretty;
            global.diffview     = diffview;
            global.jspretty     = jspretty;
            global.markuppretty = markuppretty;
            global.safeSort     = safeSort;
            if (prettydiff === undefined) {
                if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                    WScript
                        .StdOut
                        .WriteLine("The prettydiff function is undefined.");
                    WScript
                        .StdOut
                        .WriteLine("This likely means the prettydiff.js file cannot be resolved at its specified loc" +
                                "ation.");
                } else {
                    WScript.Echo("The prettydiff function is undefined./nThis likely means the prettydiff.js file " +
                            "cannot be resolved.");
                }
                fail = true;
            }
            /*read = WScript.Arguments.Named("readmethod") || "file";
                        if (read !== "file" && read !== "directory" && read !== "subdirectory") {
                            read = "file";
                        }*/
            if (typeof WScript.Arguments.Named("source") === "string") {
                if (read === "file") {
                    filestring  = [openfile(WScript.Arguments.Named("source"), "source")];
                    args.source = filestring.toString();
                } else if (read === "directory") {
                    //args.source = opendir(WScript.Arguments.Named("source"), "source");
                    opendir(WScript.Arguments.Named("source"), "source");
                }
            } else {
                outerror("Error: Source file is required.");
            }
            if (fail === false) {
                args.api             = "wsf";
                args.attributetoken  = (WScript.Arguments.Named("attributetoken") === "true" || WScript.Arguments.Named("attributetoken") === true);
                args.braceline       = (WScript.Arguments.Named("braceline") === "true" || WScript.Arguments.Named("braceline") === true);
                args.bracepadding    = (WScript.Arguments.Named("bracepadding") === "true" || WScript.Arguments.Named("bracepadding") === true);
                args.braces          = (WScript.Arguments.Named("indent") === "allman")
                    ? "allman"
                    : "knr";
                args.comments        = (WScript.Arguments.Named("comments") === "noindent")
                    ? "noindent"
                    : "indent";
                args.commline        = (WScript.Arguments.Named("commline") === "true" || WScript.Arguments.Named("commline") === true);
                args.conditional     = (WScript.Arguments.Named("conditional") === "true" || WScript.Arguments.Named("conditional") === true);
                args.content         = (WScript.Arguments.Named("content") === "true" || WScript.Arguments.Named("content") === true);
                args.context         = (isNaN(WScript.Arguments.Named("context")))
                    ? ""
                    : Number(WScript.Arguments.Named("context"));
                args.correct         = (WScript.Arguments.Named("correct") === "true" || WScript.Arguments.Named("correct") === true);
                args.crlf            = (WScript.Arguments.Named("crlf") === "true" || WScript.Arguments.Named("crlf") === true);
                args.cssinsertlines  = (WScript.Arguments.Named("cssinsertlines") === "true" || WScript.Arguments.Named("cssinsertlines") === true);
                args.csvchar         = (WScript.Arguments.Named("csvchar") || ",");
                args.diffcomments    = (WScript.Arguments.Named("diffcomments") === "true" || WScript.Arguments.Named("diffcomments") === true);
                args.difflabel       = (WScript.Arguments.Named("difflabel") || "new");
                args.diffspaceignore = (WScript.Arguments.Named("diffspaceignore") === "true" || WScript.Arguments.Named("diffspaceignore") === true);
                args.diffview        = (WScript.Arguments.Named("diffview") === "inline")
                    ? "inline"
                    : "sidebyside";
                args.dustjs          = (WScript.Arguments.Named("dustjs") === "true" || WScript.Arguments.Named("dustjs") === true);
                args.elseline        = (WScript.Arguments.Named("elseline") === "true" || WScript.Arguments.Named("elseline") === true);
                args.endcomma        = (WScript.Arguments.Named("endcomma") === "true" || WScript.Arguments.Named("endcomma") === true);
                args.force_attribute = (WScript.Arguments.Named("force_attribute") === "true" || WScript.Arguments.Named("force_attribute") === true);
                args.force_indent    = (WScript.Arguments.Named("force_indent") === "true" || WScript.Arguments.Named("force_indent") === true);
                args.formatArray     = (WScript.Arguments.Named("formatArray") === "indent" || WScript.Arguments.Named("formatArray") === "inline")
                    ? WScript.Arguments.Named("formatArray")
                    : "default";
                args.formatObject    = (WScript.Arguments.Named("formatObject") === "indent" || WScript.Arguments.Named("formatObject") === "inline")
                    ? WScript.Arguments.Named("formatObject")
                    : "default";
                args.functionname    = (WScript.Arguments.Named("functionname") === "true" || WScript.Arguments.Named("html") === true);
                args.html            = (WScript.Arguments.Named("html") === "true" || WScript.Arguments.Named("html") === true);
                args.inchar          = WScript
                    .Arguments
                    .Named("inchar") || " ";
                args.inlevel         = (isNaN(WScript.Arguments.Named("inlevel")))
                    ? 0
                    : Number(WScript.Arguments.Named("inlevel"));
                args.insize          = (isNaN(WScript.Arguments.Named("insize")))
                    ? 4
                    : Number(WScript.Arguments.Named("insize"));
                args.jekyll          = (WScript.Arguments.Named("jekyll") === "true" || WScript.Arguments.Named("jekyll") === true);
                args.jsscope         = (WScript.Arguments.Named("jsscope") === "html" || WScript.Arguments.Named("jsscope") === "report")
                    ? WScript
                        .Arguments
                        .Named("jsscope")
                    : "none";
                args.lang            = WScript
                    .Arguments
                    .Named("lang") || "auto";
                args.langdefault     = (WScript.Arguments.Named("langdefault") === "markup" || WScript.Arguments.Named("langdefault") === "html" || WScript.Arguments.Named("langdefault") === "css" || WScript.Arguments.Named("langdefault") === "csv" || WScript.Arguments.Named("langdefault") === "javascript")
                    ? WScript
                        .Arguments
                        .Named("langdefault")
                    : "text";
                if (WScript.Arguments.Named("methodchain") === "true" || WScript.Arguments.Named("methodchain") === true || WScript.Arguments.Named("methodchain") === "chain") {
                    args.methodchain = "chain";
                } else if (WScript.Arguments.Named("methodchain") === "none") {
                    args.methodchain = "none";
                } else {
                    args.methodchain = "indent";
                }
                args.miniwrap     = (WScript.Arguments.Named("miniwrap") === "true" || WScript.Arguments.Named("miniwrap") === true);
                args.mode         = (WScript.Arguments.Named("mode") === "beautify" || WScript.Arguments.Named("mode") === "minify" || WScript.Arguments.Named("mode") === "parse" || WScript.Arguments.Named("mode") === "analysis")
                    ? WScript.Arguments.Named("mode")
                    : "diff";
                args.neverflatten = (WScript.Arguments.Named("neverflatten") === "true" || WScript.Arguments.Named("neverflatten") === true);
                args.nocaseindent = (WScript.Arguments.Named("nocaseindent") === "true" || WScript.Arguments.Named("nocaseindent") === true);
                args.nochainindent = (WScript.Arguments.Named("nochainindent") === "true" || WScript.Arguments.Named("nochainindent") === true);
                args.noleadzero   = (WScript.Arguments.Named("noleadzero") === "true" || WScript.Arguments.Named("noleadzero") === true);
                args.objsort      = (WScript.Arguments.Named("objsort") === "all" || WScript.Arguments.Named("objsort") === "css" || WScript.Arguments.Named("objsort") === "markup" || WScript.Arguments.Named("objsort") === "none")
                    ? WScript
                        .Arguments
                        .Named("objsort")
                    : "js";
                args.parseFormat  = (WScript.Arguments.Named("parseFormat") === "sequential" || WScript.Arguments.Named("parseFormat") === "htmltable")
                    ? WScript.Arguments.Named("parseFormat")
                    : "parallel";
                args.parseSpace   = (WScript.Arguments.Named("parseSpace") === "true" || WScript.Arguments.Named("parseSpace") === true);
                args.preserve     = (function () {
                    var pres = WScript.Arguments.Named("preserve");
                    if (pres === 1 || pres === undefined || pres === true || pres === "true" || pres === "all" || pres === "js" || pres === "css") {
                        args.preserve = 1;
                    } else if (pres === "false" || isNaN(pres) === true || Number(pres) < 1 || pres === "none") {
                        args.preserve = 0;
                    } else {
                        args.preserve = Number(pres)
                    }
                }());
                args.qml          = (WScript.Arguments.Named("qml") === "true" || WScript.Arguments.Named("qml") === true);
                args.quote        = (WScript.Arguments.Named("quote") === "true" || WScript.Arguments.Named("quote") === true);
                args.quoteConvert = (WScript.Arguments.Named("quoteConvert") === "double" || WScript.Arguments.Named("quoteConvert") === "single")
                    ? WScript
                        .Arguments
                        .Named("quoteConvert")
                    : "none";
                args.selectorlist = (WScript.Arguments.Named("selectorlist") === "true" || WScript.Arguments.Named("selectorlist") === true);
                args.semicolon    = (WScript.Arguments.Named("semicolon") === "true" || WScript.Arguments.Named("semicolon") === true);
                args.sourcelabel  = WScript
                    .Arguments
                    .Named("sourcelabel") || "base";
                args.space        = (WScript.Arguments.Named("space") !== "false" && WScript.Arguments.Named("space") !== false);
                args.spaceclose   = (WScript.Arguments.Named("spaceclose") === "true" || WScript.Arguments.Named("spaceclose") === true);
                args.style        = (WScript.Arguments.Named("style"))
                    ? "noindent"
                    : "indent";
                args.styleguide   = (typeof WScript.Arguments.Named("styleguide") === "string")
                    ? WScript
                        .Arguments
                        .Named("styleguide")
                    : "none";
                args.tagname      = (WScript.Arguments.Named("tagmerge") === "true" || WScript.Arguments.Named("tagmerge") === true);
                args.tagsort      = (WScript.Arguments.Named("tagsort") === "true" || WScript.Arguments.Named("tagsort") === true);
                args.textpreserve = (WScript.Arguments.Named("textpreserve") === "true" || WScript.Arguments.Named("textpreserve") === true);
                args.titanium     = (WScript.Arguments.Named("topcoms") === "true" || WScript.Arguments.Named("topcoms") === true);
                args.topcoms      = (WScript.Arguments.Named("topcoms") !== "false" && WScript.Arguments.Named("topcoms") !== false);
                args.unformatted  = (WScript.Arguments.Named("unformatted") !== "false" && WScript.Arguments.Named("unformatted") !== false);
                args.varword      = (WScript.Arguments.Named("varword") === "each" || WScript.Arguments.Named("varword") === "list")
                    ? WScript
                        .Arguments
                        .Named("varword")
                    : "none";
                args.vertical     = (WScript.Arguments.Named("vertical") === "all" || WScript.Arguments.Named("vertical") === "css" || WScript.Arguments.Named("vertical") === "none")
                    ? WScript
                        .Arguments
                        .Named("vertical")
                    : "js";
                args.wrap         = (isNaN(WScript.Arguments.Named("wrap")) === true)
                    ? 80
                    : WScript
                        .Arguments
                        .Named("wrap");
                color             = WScript
                    .Arguments
                    .Named("color") || "shadow";
                args.inchar       = args
                    .inchar
                    .replace(/\\t/g, "\u0009")
                    .replace(/\\n/g, "\u000a")
                    .replace(/\\r/g, "\u000d")
                    .replace(/\\f/g, "\u000c")
                    .replace(/\\b/g, "\u0008");
                if (args.crlf === true) {
                    lf = "\r\n";
                }
                if (args.inlevel < 1) {
                    args.inlevel = 0;
                }
                if (WScript.Arguments.Named("objsort") === "true" || WScript.Arguments.Named("alphasort") === "true") {
                    args.objsort = "all";
                }
                if (WScript.Arguments.Named("preserve") === "true") {
                    args.preserve = "all";
                }
                if (WScript.Arguments.Named("vertical") === "true") {
                    args.vertical = "all";
                }
                if (WScript.Arguments.Named("indent") === "allman") {
                    args.braces = "allman";
                }
                if (args.mode !== "diff" && args.mode !== "beautify" && args.mode !== "minify") {
                    args.mode = "diff";
                    if (args.mode !== "beautify") {
                        args.correct = false;
                    }
                }
                if (args.lang === "tss") {
                    args.titanium = true;
                    args.lang     = "javscript";
                }
                if (args.lang !== "javascript" && args.lang !== "markup" && args.lang !== "html" && args.lang !== "css" && args.lang !== "csv" && args.lang !== "text") {
                    args.lang = "javascript";
                } else if (args.lang === "html") {
                    args.html = true;
                }
                if (args.mode === "diff") {
                    if (typeof WScript.Arguments.Named("diff") === "string") {
                        if (read === "file") {
                            filestring = [openfile(WScript.Arguments.Named("diff"), "diff")];
                            args.diff  = filestring.toString();
                        }
                    } else {
                        outerror("Error: Diff parameter is required unless mode is set to \"beautify\" or \"minify" +
                                "\".");
                    }
                } else {
                    args.diff = "";
                }
            }
            if (fail === false) {
                pd = prettydiff(args);
                if (args.mode === "parse" && typeof JSON === "object") {
                    args[0] = JSON.stringify(args[0]);
                }
                if (WScript.Fullname.indexOf("cscript.exe") > -1 && args.mode !== "diff") {
                    html[0] = lf + lf + lf + lf + html[0];
                }
                html[7]  = options.color;
                if (global.meta.error === "" || global.meta.error === undefined) {
                    html[10] = pd;
                } else {
                    html[10] = global.meta.error;
                }
                if (args.jsscope !== "none" && args.mode === "beautify" && (args.lang === "javascript" || args.lang === "auto")) {
                    html[12] = builder.script.beautify;
                    report   = html.join("");
                }
                if (args.mode === "diff") {
                    report = html.join("");
                }
                output = WScript
                    .Arguments
                    .Named("output");
                if (typeof output === "string" && output !== "") {
                    fso = WScript.CreateObject("Scripting.FileSystemObject");
                    //shell = WScript.CreateObject("WScript.Shell");
                    if (fso.FolderExists(output)) {
                        file[0] = fso.OpenTextFile(output);
                    } else {
                        file[0] = fso.CreateTextFile(output);
                    }
                    if (args.mode === "diff" || (args.jsscope !== "none" && args.mode === "beautify" && (args.lang === "javascript" || args.lang === "auto"))) {
                        file[0].WriteLine(report);
                        file[0].Close();
                    } else {
                        file[0].WriteLine(pd);
                        file[0].Close();
                        file[1] = fso.CreateTextFile(output + "-report.html");
                        file[1].WriteLine(report);
                        file[1].Close();
                    }
                } else {
                    if (WScript.Fullname.indexOf("cscript.exe") > -1) {
                        if (args.mode === "diff" || (args.jsscope !== "none" && args.mode === "beautify")) {
                            WScript
                                .StdOut
                                .WriteLine(report);
                        } else {
                            WScript
                                .StdOut
                                .WriteLine(pd);
                        }
                    } else {
                        if (args.mode !== "diff" || (args.jsscope !== "none" && args.mode === "beautify")) {
                            WScript.Echo(report);
                        } else {
                            WScript.Echo(pd);
                        }
                    }
                }
            }
        }());
        </script>
    </job>
</package>
